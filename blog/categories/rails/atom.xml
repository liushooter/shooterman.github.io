<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Shooter's Blog]]></title>
  <link href="http://shooterman.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://shooterman.github.io/"/>
  <updated>2014-02-16T01:56:46+08:00</updated>
  <id>http://shooterman.github.io/</id>
  <author>
    <name><![CDATA[shooter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 页面最佳实践]]></title>
    <link href="http://shooterman.github.io/blog/2014/01/15/rails-view-best-practices/"/>
    <updated>2014-01-15T22:18:18+08:00</updated>
    <id>http://shooterman.github.io/blog/2014/01/15/rails-view-best-practices</id>
    <content type="html"><![CDATA[<h2>什么是好的 view</h2>

<h3>为什么需要最佳实践？</h3>

<ul>
<li>项目太大，难懂</li>
<li>团队编程风格不同</li>
</ul>


<h3>你的 View 可能正面临的问题</h3>

<ul>
<li>Complex UI with logic UI 和代码逻辑纠缠在一起</li>
<li>Too long to maintain 代码太长难以维护</li>
<li>Low performance 性能不好</li>
<li>Security issues 容易产生安全问题</li>
</ul>


<h3>什么是好的代码</h3>

<ul>
<li>Readability 易读，容易了解</li>
<li>Flexibility 弹性，容易扩充</li>
<li>Effective 效率，写码快速</li>
<li>Maintainability 维护性，容易找到问题</li>
<li>Consistency 一致性，遵循管理无须死背</li>
<li>Testability 可测行，容易编写测试</li>
</ul>


<h2>18招技巧</h2>

<h3>No.1 Move logic to helper</h3>

<p>BAD:</p>

<p><code>erb
&lt;% if current_user &amp;&amp; current_user == post.user %&gt;
  &lt;%= link_to("Edit", edit_post_path(post))%&gt;
&lt;% end %&gt;
</code></p>

<p>GOOD:</p>

<p><code>erb
&lt;% if editable?(post) %&gt;
  &lt;%= link_to("Edit", edit_post_path(post))%&gt;
&lt;% end %&gt;
</code></p>

<h3>No.2 Pre-decorate with Helper</h3>

<p>经常用的地方先用 helper 整理</p>

<p>BAD:</p>

<p><code>erb
&lt;%= @topic.content %&gt;
</code></p>

<p><code>erb
&lt;%= auto_link(truncate(simple_format(topic.content)), :length =&gt; 100) %&gt;
</code></p>

<p>GOOD:</p>

<p><code>erb
&lt;%= render_post_content(@topic.content) %&gt;
</code></p>

<p>Common Case</p>

<ul>
<li>render_post_author</li>
<li>render_post_published_date</li>
<li>render_post_title</li>
<li>render_post_content</li>
</ul>


<h3>No.3 Use Ruby in Helper ALL THE TIME</h3>

<p>在 Helper 中只使用 Ruby 代码，而不要混杂 HTML。因为如果在 Helper 中最后调用 <strong>raw</strong> 或者 <strong>html_safe</strong> 会让代码有被 javascript 攻击的危险</p>

<p>BAD:</p>

<p><code>ruby
def render_post_taglist(post, opts = {})
  # ....
   raw tags.collect { |tag|  "&lt;a href=\"#{posts_path(:tag =&gt; tag)}\" class=\"tag\"&gt;#{tag}&lt;/a&gt;" }.join(", ")
end
</code></p>

<p>GOOD:</p>

<p>```ruby
def render_post_taglist(post, opts = {})</p>

<h1>...</h1>

<p>  raw tags.collect { |tag| link_to(tag,posts_path(:tag => tag)) }.join(", ")
end
```</p>

<h3>No.4 mix Helper &amp; Partial</h3>

<p>在 Helper 中可以混合使用 Partial</p>

<p>BAD:</p>

<p><code>ruby
def render_post_title(post)
  str = ""
  str += "&lt;li&gt;"
  str += link_to(post.title, post_path(post))
  str += "&lt;/li&gt;"
  return raw(str)
end
</code></p>

<p>GOOD:</p>

<p><code>ruby
def render_post_title(post)
  render :partial =&gt; "posts/title_for_helper", :locals =&gt;
{ :title =&gt; post.title }
end
</code></p>

<h3>No.5 Tell, Don’t ask</h3>

<p>先 Query 再传入 Helper。这样可以避免效能低下的问题。</p>

<p>BAD:</p>

<p><code>ruby
def render_post_taglist(post, opts = {})
  tags = post.tags
  tags.collect { |tag| link_to(tag, posts_path(tag: tag)) }.join(", ")
end
</code></p>

<p><code>erb
&lt;% @posts.each do |post| %&gt;
  &lt;%= render_post_taglist(post) %&gt;
&lt;% end %&gt;
</code></p>

<p>GOOD:</p>

<p><code>ruby
def render_post_taglist(tags, opts = {})
  tags.collect { |tag| link_to(tag, posts_path(tag: tag)) }.join(", ")
end
</code></p>

<p>```erb
&lt;% @posts.each do |post| %></p>

<pre><code>&lt;%= render_post_taglist(post.tags) %&gt;
</code></pre>

<p>&lt;% end %></p>

<p>def index
  @posts = Post.recent.includes(:tags)
end
```</p>

<h3>No.6 Wrap into a method</h3>

<p>属性尽量包装成 method 而不是放在 helper 中</p>

<p>BAD:</p>

<p>```ruby
def render_comment_author(comment)
  if comment.user.present?</p>

<pre><code>comment.user.name
</code></pre>

<p>  else</p>

<pre><code>comment.custom_name
</code></pre>

<p>  end
end
```</p>

<p>GOOD:</p>

<p>```ruby
def render_comment_author(comment)
  comment.author_name
end</p>

<p>class Comment &lt; ActiveRecord::Base
  def author_name</p>

<pre><code>if user.present?
  user.name
else
  custom_name
end
</code></pre>

<p>  end
end
```</p>

<h3>No.7 Move code to Partial</h3>

<p>view code 超过两页请注意</p>

<ul>
<li>highly duplicated 内容高度重复</li>
<li>independent blocks 可以独立作为功能区块</li>
</ul>


<p>Common Case</p>

<ul>
<li>nav/user_info</li>
<li>nav/admin_menu</li>
<li>vendor_js/google_analytics</li>
<li>vendor_js/disqus_js</li>
<li>global/footer</li>
</ul>


<h3>No.8 Use presenter to clean the view</h3>

<p>使⽤ Presenter 解決 login in view 问题</p>

<p>BAD:</p>

<p><code>erb
&lt;%= if user_rofile.has_experience? &amp;&amp; user_rofile.experience_public? %&gt;
  &lt;p&gt;&lt;strong&gt;Experience:&lt;/strong&gt; &lt;%= user_profile.experience %&gt;&lt;/p&gt;
&lt;% end %&gt;
</code></p>

<p>GOOD:</p>

<p><code>erb
&lt;% user_profile.with_experience do %&gt;
  &lt;p&gt;&lt;strong&gt;Experience:&lt;/strong&gt; &lt;%= user_profile.experience %&gt;&lt;/p&gt;
&lt;% end %&gt;
&lt;% user_profile.with_hobbies do %&gt;
  &lt;p&gt;&lt;strong&gt;Hobbies:&lt;strong&gt; &lt;%= user_profile.hobbies %&gt;&lt;/p&gt;
&lt;% end %&gt;
</code></p>

<p>```ruby
class ProfilePresenter &lt; ::Presenter
  def with_experience(&amp;block)</p>

<pre><code>if profile.has_experience? &amp;&amp; profile.experience_public?
  block.call(view)
end
</code></pre>

<p>  end
end
```</p>

<p><strong>关于 presenter 的延伸阅读</strong></p>

<ul>
<li><a href="http://mikepackdev.com/blog_posts/31-exhibit-vs-presenter">Exhibit vs Presenter</a></li>
<li><a href="http://stackoverflow.com/questions/15212637/using-presenters-in-rails">Using Presenters in rails</a></li>
<li><a href="http://railscasts.com/episodes/287-presenters-from-scratch">Presenters from Scratch</a></li>
<li><a href="http://blog.jayfields.com/2007/03/rails-presenter-pattern.html">Rails: Presenter Pattern</a></li>
<li><a href="http://new-bamboo.co.uk/blog/2013/04/17/rails-presenters-skinny-everything">Rails Presenters – Skinny Everything</a></li>
</ul>


<h3>No.9 Cache Digest</h3>

<p>过去的页面缓存，我们需要自己管理版本，很难维护。新的 digest 缓存策略会自动失效。</p>

<p>BAD:</p>

<p>```erb
&lt;% cache [v15,@project] do %>
  aaa
  &lt;% cache [v10,@todo] do %></p>

<pre><code>bbb
&lt;% cache [v45,@todolist] do %&gt;
  zzz
&lt;% end %&gt;
</code></pre>

<p>  &lt;% end %>
&lt;% end % %>
```</p>

<p>GOOD:</p>

<p>```erb
&lt;% cache @project do %>
  aaa
  &lt;% cache @todo do %></p>

<pre><code>bbb
&lt;% cache @todolist do %&gt;
  ccc
&lt;% end %&gt;
</code></pre>

<p>  &lt;% end %>
&lt;% end %>
```</p>

<p><strong>关于 Cache Digest 的延伸阅读</strong></p>

<ul>
<li><a href="https://github.com/rails/cache_digests">cache_digests on github</a></li>
<li><a href="http://railscasts.com/episodes/387-cache-digests">Cache Digests</a></li>
</ul>


<h3>No.10 Cells</h3>

<p>当同一个页面含有多个 Tab ，它会造成如下问题：</p>

<ul>
<li>Controller code 特别长，因为需要取出很多不同数据存入的变量</li>
<li>在 controller &amp; view 有性能问题不好找到</li>
<li>很难设置 action 级别的缓存</li>
</ul>


<p>BAD:</p>

<p>```ruby
class UsersController &lt; ApplicationController
  def show</p>

<pre><code>@user = User.find(params[:id])
@recent_posts = @user.recent_posts.limit(5)
@favorite_posts = @user.favorite_posts.limit(5)
@recent_comments = @user.comments.limit(5)
</code></pre>

<p>  end
end
```</p>

<p><code>erb
&lt;%= render :partial =&gt; "users/recent_post", :collection =&gt; @recent_posts %&gt;
&lt;%= render :partial =&gt; "users/favorite_post", :collection =&gt; @favorite_posts %&gt;
&lt;%= render :partial =&gt; "users/recent_comment", :collection =&gt; @recent_comments %&gt;
</code></p>

<p>GOOD:</p>

<p><code>erb
&lt;%= render_cell :user, :rencent_posts, :user =&gt; @user %&gt;
&lt;%= render_cell :user, :favorite_posts, :user =&gt; @user %&gt;
&lt;%= render_cell :user, :recent_comments, :user =&gt; @user %&gt;
</code></p>

<p>```ruby
class UsersController &lt; ApplicationController
  def show</p>

<pre><code>@user = User.find(params[:id])
</code></pre>

<p>  end
end
```</p>

<p>```ruby
class UserCell &lt; Cell::Rails
  cache :recent_posts, :expires_in => 1.hours
  cache :favorite_posts, :expires_in => 3.hours
  cache :recent_comments, :expires_in => 5.hours</p>

<p>  def recent_posts(args)
   #...
  end</p>

<p>  def favorite_posts(args)</p>

<pre><code>#...
</code></pre>

<p>  end</p>

<p>  def recent_comments(args)</p>

<pre><code>#...
</code></pre>

<p>  end
end
```</p>

<p><strong>关于 Cells 的延伸阅读</strong></p>

<ul>
<li><a href="https://github.com/apotonick/cells">cells on github</a></li>
</ul>


<h3>No.11 content_for / yield</h3>

<p>根据 Yahoo 大神的建议，应该把 javascript 和 css 代码放在页面的最下面。以便加快加载，但是会造成一些问题。比如你自定义的 js 代码比 jquery 库更早加载，以至于无法运行你的代码。</p>

<p>例子1:</p>

<p>```erb</p>

<!-- application.html.erb -->


<p>&lt;%= stylesheet_link_tag "application" %>
&lt;%= yield %>
&lt;%= javascript_include_tag "application" %>
&lt;%= yield :page_specific_javascript %></p>

<!-- main.html.erb -->


<p>&lt;%= content_for :page_specific_javascript do %>
  <script type= "text/javascript"></p>

<pre><code>// your script here
</code></pre>

<p>  </script>
&lt;% end %>
```</p>

<p>例子2:</p>

<p>```erb</p>

<!-- application.html.erb -->


<div class="main">
  <%= yield %>
</div>


<div class="sidebar">
  <%= yield :sidebar %>
</div>




<!-- main.html.erb -->


<p>&lt;%= content_for :sidebar do %>
  &lt;%= render "ad/foo"%>
&lt;% end %>
```</p>

<h3>No.12 Decoration in Controller</h3>

<p>有个别情况，可以把一些代码放在 controller 中</p>

<p>BAD:</p>

<p><code>erb
&lt;%= content_for :meta do %&gt;
  &lt;meta content="xdite's blog" name="description"&gt;
  &lt;meta content="Blog.XDite.net" property="og:title"&gt;
&lt;% end %&gt;
</code></p>

<p>GOOD:</p>

<p><code>ruby
def show
  @blog = current_blog
  drop_blog_title @blog.name
  drop_blog_descption @blog.description
end
</code></p>

<p><code>erb
&lt;%= stylesheet_tag "application" %&gt;
&lt;%= render_page_title %&gt;
&lt;%= render_page_descrption %&gt;
</code></p>

<h3>No.13 Decoration using I18n</h3>

<p>善用 I18n 也可以帮你减少一部分 View 代码</p>

<p>BAD:</p>

<p>```ruby
def render_user_geneder(user)
  if user.gender == "male"</p>

<pre><code>"男 (Male)"
</code></pre>

<p>  else</p>

<pre><code>"⼥女 (Female)"
</code></pre>

<p>  end
end
```</p>

<p>GOOD:</p>

<p><code>ruby
def render_user_gender(user)
  I18n.t("users.gender_desc.#{user.geneder}")
end
</code></p>

<h3>No.14 Decoration using Decorator</h3>

<p>不要把所有代码都往 Model 中扔，下面的代码演示了一种情况，你需要格式化一种显示发布时间的方法</p>

<p>BAD:</p>

<p>```ruby</p>

<h1>first helper</h1>

<p>def render_article_publish_status(article)
  if article.published?</p>

<pre><code>"Published at #{article.published_at.strftime('%A, %B %e')}"
</code></pre>

<p>  else</p>

<pre><code>"Unpublished"
</code></pre>

<p>  end
end</p>

<h1>then model method</h1>

<p>class Article &lt; ActiveRecord::Base
  def human_publish_status</p>

<pre><code>if published?
  "Published at #{article.published_at.strftime('%A, %B %e')}"
else
  "Unpublished"
end
</code></pre>

<p>  end
end</p>

<h1>then ...</h1>

<p>class Article &lt; ActiveRecord::Base
  def human_publish_status
  end</p>

<p>  def human_publish_time
  end</p>

<p>  def human_author_name
  end
  #........
end</p>

<h1>at last</h1>

<p>class Article &lt; ActiveRecord::Base
  include HumanArticleAttributes
end
```</p>

<p>下面的代码演示使用 https://github.com/drapergem/draper 之后</p>

<p>GOOD:</p>

<p><code>erb
&lt;%= @article.publication_status %&gt;
</code></p>

<p>```ruby
class ArticleDecorator &lt; Draper::Decorator
  delegate_all
  def publication_status</p>

<pre><code>if published?
  "Published at #{published_at}"
else
  "Unpublished"
end
</code></pre>

<p>  end</p>

<p>  def published_at</p>

<pre><code>object.published_at.strftime("%A, %B %e")
</code></pre>

<p>  end
end</p>

<p>def show
  @article = Article.find(params[:id]).decorate
end
```</p>

<p><strong>关于 draper 的延伸阅读</strong></p>

<ul>
<li><a href="https://github.com/drapergem/draper">draper on github</a></li>
<li><a href="https://www.ruby-toolbox.com/categories/rails_presenters">rails_presenters gems</a></li>
</ul>


<h3>No.15 Decoration using View Object</h3>

<p>有时候，我们希望在用户中，不列出我自己</p>

<p>BAD:</p>

<p>```erb</p>

<dl class="event-detail">
  <dt>Event Host</dt>
  <dd>
    <% if @event.host == current_user %>
      You
    <% else %>
      <%= @event.host.name %>
    <% end %>
  </dd>
  <dt>Participants</dt>
  <dd>
    <%= @event.participants.reject { |p| p == current_user }.map(&:name).join(", ") %>
  </dd>
</dl>


<p>```</p>

<p>GOOD:</p>

<p>```ruby
class EventDetailView
  def initialize(template, event, current_user)</p>

<pre><code>@template = template
@event = event
@current_user = current_user
</code></pre>

<p>  end
  def host</p>

<pre><code>if @event.host == @current_user
  "You"
else
  @event.host.name
end
</code></pre>

<p>  end
  def participant_names</p>

<pre><code>participants.map(&amp;:name).join(", ")
</code></pre>

<p>  end
  private</p>

<p>  def participants</p>

<pre><code>@event.participants.reject { |p| p == @current_user }
</code></pre>

<p>  end
end
```</p>

<p>```erb</p>

<dl class="event-detail">
  <dt>Host</dt>
  <dd><%= event_detail.host %></dd>
  <dt>Participants</dt>
  <dd><%= event_detail.participant_names %></dd>
</dl>


<p>```</p>

<h3>No.16 Form builder</h3>

<ul>
<li>simple_form</li>
<li>bootstrap_form</li>
</ul>


<h3>No.17 Form Object</h3>

<p>在 FORM 中包装逻辑，而不是 model 或 controller。比如我们经常遇到的一个情况，只有同意某某条款才能继续注册表单。</p>

<p><strong>Reform</strong> Decouples your models from form validation, presentation and workflows.</p>

<p>https://github.com/apotonick/reform</p>

<h3>No.18 Policy Object / Rule Engine</h3>

<p>权限控制</p>

<p>BAD:</p>

<p>```ruby
def render_post_edit_option(post)
  if post.user == current_user || current_user.admin?</p>

<pre><code>render :partial =&gt; "post/edit_bar"
</code></pre>

<p>  end
end
```</p>

<p>针对于这种情况建议使用权限控制系统，另外近来似乎大家都从 Cancan 转移到 Pundit 去了</p>

<p><strong>Pundit</strong> Minimal authorization through OO design and pure Ruby classes</p>

<p>https://github.com/elabs/pundit</p>

<p><strong>Cancan</strong> Authorization Gem for Ruby on Rails</p>

<p>https://github.com/ryanb/cancan</p>

<h2>总结</h2>

<ul>
<li>总是假设这块正在实现的功能代码需要 decorated（修饰）</li>
<li>把逻辑移到 methods/classes</li>
<li>避免在 View/Helper 中做数据库查询</li>
<li>当代码很难懂的时候，把它抽取到一个新的控制中心比如：form object, Policy Object 之类的</li>
</ul>


<h2>延伸阅读</h2>

<ul>
<li>http://blog.xdite.net</li>
<li>https://github.com/bloudermilk/maintainable_templates http://pivotallabs.com/form-backing-objects-for-fun-and-profit/</li>
<li>http://saturnflyer.com/blog/jim/2013/10/21/how-to-make-your-code-imply-responsibilities/</li>
<li>http://objectsonrails.com/</li>
</ul>


<h2>出处</h2>

<p>以上内容由 <strong>Victor</strong> 整理，本人只是记录在blog中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails使用队列resque]]></title>
    <link href="http://shooterman.github.io/blog/2013/11/08/resque-for-rails/"/>
    <updated>2013-11-08T12:13:40+08:00</updated>
    <id>http://shooterman.github.io/blog/2013/11/08/resque-for-rails</id>
    <content type="html"><![CDATA[<h3>准备</h3>

<p><a href="https://github.com/resque/resque">Resque</a> 依赖 <a href="http://redis.io/">Redis</a>，
请先安装reids数据库。</p>

<hr />

<h3>安装Resque</h3>

<pre><code>gem "resque", "~&gt; 1.25.1"
</code></pre>

<p>运行 resque-web 会打开 http://0.0.0.0:5678/overview</p>

<h5>创建Rake</h5>

<p>lib/tasks/resque.rake</p>

<p>```ruby
  require 'resque/tasks'</p>

<p>  task "resque:setup" => :environment</p>

<p>  # task "resque:setup" => :environment do
  #   ENV['QUEUE'] = "*"
  # end
  # 执行 rake resque:work 会启动所有队列</p>

<p>```</p>

<h5>创建任务</h5>

<p>app/workers/resque_job.rb</p>

<p>```ruby
class ResqueJob
  @queue = :resque_job #定义队列名称</p>

<p>  def self.perform(u_name) #必须定义 执行方法体</p>

<pre><code>puts "hello #{u_name}"
</code></pre>

<p>  end
end</p>

<p>```</p>

<h5>启动 queue</h5>

<p>rake resque:work QUEUE='*' #启动所有队列</p>

<p>rake resque:work QUEUE='resque_job' #启动队列名称为resque_job的单个队列</p>

<h5>调用 queue</h5>

<p><code>ruby
Resque.enqueue(ResqueJob,"everyone") #调用队列
</code></p>

<h4>项目中查看resque任务</h4>

<p><code>ruby
gem "resque", "~&gt; 1.25.1", :require =&gt; "resque/server"
mount Resque::Server, :at =&gt; "/resque" # routes.rb
</code></p>

<p>访问 http://0.0.0.0:3000/resque/overview</p>

<h4>限制访问</h4>

<p>```ruby
  # config/initializers/resque_auth.rb
  Resque::Server.use(Rack::Auth::Basic) do |user, password|</p>

<pre><code>password == "password"
</code></pre>

<p>  end
```</p>

<hr />

<h3>Redis 命令行</h3>

<p>```
redis-server #Redis服务器的daemon启动程序</p>

<p>redis-cli #Redis命令行操作工具。当然，你也可以用telnet根据其纯文本协议来操作</p>

<p>redis-benchmark #Redis性能测试工具，测试Redis在你的系统及你的配置下的读写性能</p>

<p>redis-stat #Redis状态检测工具，可以检测Redis当前状态参数及延迟状况</p>

<p>```</p>

<hr />

<h3>定时队列</h3>

<pre><code>gem "resque-scheduler", "~&gt; 2.0.1"  :require =&gt; "resque_scheduler"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在rails中创建定时任务]]></title>
    <link href="http://shooterman.github.io/blog/2013/11/06/whenever/"/>
    <updated>2013-11-06T17:30:26+08:00</updated>
    <id>http://shooterman.github.io/blog/2013/11/06/whenever</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/javan/whenever">whenever 源码</a></p>

<h3>安装 运行</h3>

<p>1 gem "whenever", "~> 0.8.4"</p>

<p>2 在命令行输入 <code>wheneverize .</code></p>

<p>生成config/schedule.rb</p>

<p>3 编写 schedule.rb</p>

<p><code>ruby
env :PATH, ENV['PATH']
set :output, {:error =&gt; File.join(Whenever.path, "log", "cron_err.log"), :standard =&gt;File.join(Whenever.path, "log", "cron_out.log")}
set :environment, 'development'
</code></p>

<p>4 执行</p>

<pre><code>whenever #根据schedule.rb 转换成cron语法, 不会写入crontab文件

whenever --update-crontab #写入crontab文件

whenever -s environment=development -w ~/minsheng/config/schedule.rb

whenever --help
</code></pre>

<h3>linux crontab 命令</h3>

<pre><code>crontab -l # 列出某个用户cron服务的详细内容
crontab -e # 修改
crontab -r # 删除某个用户的cron服务
</code></pre>

<h3>schedule.rb 示例</h3>

<p>```
every 3.hours do
  runner "MyModel.some_process"
  rake "my:rake:task"
  command "/usr/bin/my_great_command"
end</p>

<p>every 1.day, :at => '4:30 am' do
  runner "MyModel.task_to_run_at_four_thirty_in_the_morning"
end</p>

<p>every :hour do # Many shortcuts available: :hour, :day, :month, :year, :reboot
  runner "SomeModel.ladeeda"
end</p>

<p>every :sunday, :at => '12pm' do # Use any day of the week or :weekend, :weekday
  runner "Task.do_something_great"
end</p>

<p>every '0 0 27-31 * *' do
  command "echo 'you can use raw cron syntax too'"
end</p>

<h1>run this task only on servers with the :app role in Capistrano</h1>

<h1>see Capistrano roles section below</h1>

<p>every :day, :at => '12:20am', :roles => [:app] do
  rake "app_server:task"
end
```</p>

<h3>定义自己的工作类型</h3>

<p>```
job_type :awesome, '/usr/local/bin/awesome :task :fun_level'</p>

<p>every 2.hours do
  awesome "party", :fun_level => "extreme"
end
```</p>

<h3>whenever 默认的工作类型与定义</h3>

<p><code>
job_type :command, ":task :output"
job_type :rake,    "cd :path &amp;&amp; :environment_variable=:environment bundle exec rake :task --silent :output"
job_type :runner,  "cd :path &amp;&amp; script/rails runner -e :environment ':task' :output"
job_type :script,  "cd :path &amp;&amp; :environment_variable=:environment bundle exec script/:task :output"
</code></p>

<h3>RVM 集成</h3>

<p>...</p>

<h3>Capistrano 集成</h3>

<p>...</p>

<h3>资料</h3>

<p><a href="http://zh.wikipedia.org/wiki/Cron">What is Cron</a></p>

<p><a href="http://huacnlee.com/blog/create-rails-task-scheduler-by-rake-and-cronjob/">Rake + cronjob 创建计划任务</a></p>

<p><a href="http://railscasts.com/episodes/164-cron-in-ruby">164-cron-in-ruby</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby的yield和闭包]]></title>
    <link href="http://shooterman.github.io/blog/2012/09/15/the-ruby-syntax-yield-and-closure/"/>
    <updated>2012-09-15T02:06:00+08:00</updated>
    <id>http://shooterman.github.io/blog/2012/09/15/the-ruby-syntax-yield-and-closure</id>
    <content type="html"><![CDATA[<p><strong>First Blood</strong>  来些血腥凶残暴力的！
这些经常在面试中被提问，内容很多。
从面试里单独拿出来，这东西相当于神器级别，必须谨慎对待。</p>

<p>yield是ruby中一个特殊的关键字，可以调用块方法(block)，而block是ruby闭包的一种，
故将三者联系起来，yeild天生就是闭包的小跟班儿。感觉没必要单独讲，不然很割裂的赶脚。</p>

<h3><strong> ruby 闭包</strong>   block，Proc，lambda</h3>

<p><strong>block 与 yield</strong>
block 是最常用到的，有两种形式,{}和do ... end。
一般单行习惯用{}，多行用do ... end，当然这只是习惯。</p>

<p>``` ruby demo.rb
def test_yield
  yield
end</p>

<p>test_yield{ puts "this is first block." } # yield可以调用block 即{...}</p>

<p>test_yield do
  puts "this is second block."
end</p>

<p>def test2_yield<br/>
  yield("shooter")<br/>
end</p>

<p>test2_yield{ |var| puts "This args is #{var}." }</p>

<h1>传给yield的参数(此处为shooter)即对应了block中的参数(||中的部分)</h1>

<p>```</p>

<p>还可以通过 Kernel#block_given? 方法询问当前的方法调用是否包含块。
```ruby
def test
  return yield if block_given?
  puts 'no block'
end</p>

<p>test # => no block
test{ puts "Here's a block" } # => Here's a block
```</p>

<p><strong>Proc对象</strong></p>

<p>```ruby
plus = Proc.new { |x| x + 1 }
puts plus.call(2) # =>3</p>

<p>subtract = proc { |x| x - 1 }
puts subtract.call(4) # =>3
```
这被称为<strong>延迟执行</strong>(Defferred Evaluation)。</p>

<p>通过<strong>&amp;操作符</strong>，block 与 Proc对象可以相互转化。</p>

<p>```
def math_one(a, b, &amp;oper)
  puts yield(a,b)
end</p>

<p>def math_two(a, b, &amp;oper)
  puts oper.call(a,b)
end</p>

<p>math_one(2,3) { |x,y| x + y} # => 2 + 3 = 5
math_two(2,3) { |x,y| x * y} # => 2 * 3 = 6
<code>
那么这个&amp;起了什么作用？
</code>ruby
def my_method(&amp;code)
  code
end</p>

<p>p = my_method{ |name| "Hello,#{name}!"}
puts p.class # => Proc
puts p.call("shooter") # => Hello,shooter!
<code>
&amp;操作符的真正含义：Proc对象和块之间的切换符号。&amp;code是一个块，code是一个Proc对象。
简单的去掉&amp;操作符，我们就能再次得到一个Proc对象。
</code>
def proc_to_block(greeting)
  puts "#{greeting},#{yield}"
end</p>

<p>my_proc = Proc.new {"shooter!"}
puts my_proc.class
proc_to_block("Hello", &amp;my_proc)
<code>
__lambda函数__
lambda跟Proc就像两个双胞胎
</code>
plus = lambda { |x| x + 1 }
puts plus.call(2) # =>3
<code>
lambda跟Proc有两个最明显的区别: &lt;br/&gt;
1. lambda检查参数的个数，Proc不会。&lt;br/&gt;
&amp;nbsp;在Proc中，多余的参数被设为nil。但lambda中，Ruby会抛出一个ArgumentError错误。&lt;br/&gt;
2. return不同。&lt;br/&gt;
&amp;nbsp;lambda的return是返回值给方法，方法会继续执行。Proc的return会终止方法并返回得到的值。
</code>
def proc_return
  Proc.new { return "Proc.new"}.call
  return "proc_return method finished"
end</p>

<p>def lambda_return
  lambda { return "lambda" }.call
  return "lambda_return method finished"
end</p>

<p>puts proc_return    # => Proc.new
puts lambda_return # => lambda_return method finished
```
看了代码会一目了然。参考了不少资料，就是拼凑的起来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR的一些面试经验(一)]]></title>
    <link href="http://shooterman.github.io/blog/2012/09/05/interview-questions-about-the-ror/"/>
    <updated>2012-09-05T01:30:00+08:00</updated>
    <id>http://shooterman.github.io/blog/2012/09/05/interview-questions-about-the-ror</id>
    <content type="html"><![CDATA[<p> 那些天我不是在面试，就是在面试的路上，搞得很懈怠，主要还是精神上的。
 有的中规中矩;有的问题很琐碎;有的很BT,概念性的东西一股闹的全抛出来了......
 我记性不太好，对概念不感冒，倒不是从小这样，记得当年还背过视力表，
 可能三聚氰胺喝多了吧。</p>

<h3>Symbol与String</h3>

<p>在rails中经常看到Symbol，像 <code>:name  :email params[:user]</code>，
这种已:开头的变量就是Symbol对象。貌似我经常把两者混用，还有些不同的。</p>

<p><strong>创建 symbol 对象</strong>
<code>
 :foo
 :"shooter"
</code></p>

<p>在 Ruby 中每一个对象都有唯一的对象标识符（Object Identifier），可以通过 object_id 方法来得到一个对象的标识符。</p>

<p><code>
1.9.3p194 :001 &gt; 3.times{ puts :foo.object_id }
230808
230808
230808
 =&gt; 3
1.9.3p194 :002 &gt; 3.times{ puts "foo".object_id }
85823400
85823380
85823350
 =&gt; 3
</code>
一个字符串每出现一次 Ruby 就会创建一个 String对象，即便他们包含了相同的字符串内容；
而对于 Symbol 对象，一个名字（字符串内容）唯一确定一个 Symbol 对象。
Symbol 对象一旦定义将一直存在，你不能对symbol赋值，
而且在运行环境中symbol的值也不会改变，直到程序执行退出。</p>

<p><strong>相互转化</strong></p>

<p>```</p>

<h1>Symbol到String</h1>

<p>1.9.3p194 :001 > :foo.id2name
 => "foo"
1.9.3p194 :002 > :foo.to_s
 => "foo"
1.9.3p194 :003 > :"I am a rubyist"
 => :"I am a rubyist"</p>

<h1>String到Symbol</h1>

<p>1.9.3p194 :004 > "rubyist".to_sym
 => :rubyist
1.9.3p194 :005 > "rubyist".intern
 => :rubyist
```</p>

<p>从实用角度看，在一些场景下Symbol好过String只有两点：<strong>节省内存，表达简洁</strong> <br/>
通常来讲，当你面临 String 还是 Symbol 的选择时，可以参考以下标准：<br/>
&nbsp;&nbsp;如果使用字符串的内容，这个内容可能会变化，使用 String <br/>
&nbsp;&nbsp;如果使用固定的名字或者说是标识符，使用 Symbol。</p>

<p>这是第一篇，没想到一个内容就这么多，再写东西就有些多了，果断阉割了。</p>
]]></content>
  </entry>
  
</feed>
