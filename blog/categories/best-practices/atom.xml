<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Best_practices | Shooter's Blog]]></title>
  <link href="http://shooterman.github.io/blog/categories/best-practices/atom.xml" rel="self"/>
  <link href="http://shooterman.github.io/"/>
  <updated>2014-01-15T22:48:32+08:00</updated>
  <id>http://shooterman.github.io/</id>
  <author>
    <name><![CDATA[shooter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 页面最佳实践]]></title>
    <link href="http://shooterman.github.io/blog/2014/01/15/rails-view-best-practices/"/>
    <updated>2014-01-15T22:18:18+08:00</updated>
    <id>http://shooterman.github.io/blog/2014/01/15/rails-view-best-practices</id>
    <content type="html"><![CDATA[<h2>什么是好的 view</h2>

<h3>为什么需要最佳实践？</h3>

<ul>
<li>项目太大，难懂</li>
<li>团队编程风格不同</li>
</ul>


<h3>你的 View 可能正面临的问题</h3>

<ul>
<li>Complex UI with logic UI 和代码逻辑纠缠在一起</li>
<li>Too long to maintain 代码太长难以维护</li>
<li>Low performance 性能不好</li>
<li>Security issues 容易产生安全问题</li>
</ul>


<h3>什么是好的代码</h3>

<ul>
<li>Readability 易读，容易了解</li>
<li>Flexibility 弹性，容易扩充</li>
<li>Effective 效率，写码快速</li>
<li>Maintainability 维护性，容易找到问题</li>
<li>Consistency 一致性，遵循管理无须死背</li>
<li>Testability 可测行，容易编写测试</li>
</ul>


<h2>18招技巧</h2>

<h3>No.1 Move logic to helper</h3>

<p>BAD:</p>

<p><code>erb
&lt;% if current_user &amp;&amp; current_user == post.user %&gt;
  &lt;%= link_to("Edit", edit_post_path(post))%&gt;
&lt;% end %&gt;
</code></p>

<p>GOOD:</p>

<p><code>erb
&lt;% if editable?(post) %&gt;
  &lt;%= link_to("Edit", edit_post_path(post))%&gt;
&lt;% end %&gt;
</code></p>

<h3>No.2 Pre-decorate with Helper</h3>

<p>经常用的地方先用 helper 整理</p>

<p>BAD:</p>

<p><code>erb
&lt;%= @topic.content %&gt;
</code></p>

<p><code>erb
&lt;%= auto_link(truncate(simple_format(topic.content)), :length =&gt; 100) %&gt;
</code></p>

<p>GOOD:</p>

<p><code>erb
&lt;% if editable?(post) %&gt;
  &lt;%= link_to("Edit", edit_post_path(post))%&gt;
&lt;% end %&gt;
</code></p>

<p>Common Case</p>

<ul>
<li>render_post_author</li>
<li>render_post_published_date</li>
<li>render_post_title</li>
<li>render_post_content</li>
</ul>


<h3>No.3 Use Ruby in Helper ALL THE TIME</h3>

<p>在 Helper 中只使用 Ruby 代码，而不要混杂 HTML。因为如果在 Helper 中最后调用 <strong>raw</strong> 或者 <strong>html_safe</strong> 会让代码有被 javascript 攻击的危险</p>

<p>BAD:</p>

<p><code>ruby
def render_post_taglist(post, opts = {})
  # ....
   raw tags.collect { |tag|  "&lt;a href=\"#{posts_path(:tag =&gt; tag)}\" class=\"tag\"&gt;#{tag}&lt;/a&gt;" }.join(", ")
end
</code></p>

<p>GOOD:</p>

<p>```ruby
def render_post_taglist(post, opts = {})</p>

<h1>...</h1>

<p>  raw tags.collect { |tag| link_to(tag,posts_path(:tag => tag)) }.join(", ")
end
```</p>

<h3>No.4 mix Helper &amp; Partial</h3>

<p>在 Helper 中可以混合使用 Partial</p>

<p>BAD:</p>

<p><code>ruby
def render_post_title(post)
  str = “”
  str += “&lt;li&gt;”
  str += link_to(post.title, post_path(post))
  str += “&lt;/li&gt;”
  return raw(str)
end
</code></p>

<p>GOOD:</p>

<p><code>ruby
def render_post_title(post)
  render :partial =&gt; "posts/title_for_helper", :locals =&gt;
{ :title =&gt; post.title }
end
</code></p>

<h3>No.5 Tell, Don’t ask</h3>

<p>先 Query 再传入 Helper。这样可以避免效能低下的问题。</p>

<p>BAD:</p>

<p><code>ruby
def render_post_taglist(post, opts = {})
  tags = post.tags
  tags.collect { |tag| link_to(tag, posts_path(tag: tag)) }.join(", ")
end
</code></p>

<p><code>erb
&lt;% @posts.each do |post| %&gt;
  &lt;%= render_post_taglist(post) %&gt;
&lt;% end %&gt;
</code></p>

<p>GOOD:</p>

<p><code>ruby
def render_post_taglist(tags, opts = {})
  tags.collect { |tag| link_to(tag, posts_path(tag: tag)) }.join(", ")
end
</code></p>

<p>```erb
&lt;% @posts.each do |post| %></p>

<pre><code>&lt;%= render_post_taglist(post.tags) %&gt;
</code></pre>

<p>&lt;% end %></p>

<p>def index
  @posts = Post.recent.includes(:tags)
end
```</p>

<h3>No.6 Wrap into a method</h3>

<p>属性尽量包装成 method 而不是放在 helper 中</p>

<p>BAD:</p>

<p>```ruby
def render_comment_author(comment)
  if comment.user.present?</p>

<pre><code>comment.user.name
</code></pre>

<p>  else</p>

<pre><code>comment.custom_name
</code></pre>

<p>  end
end
```</p>

<p>GOOD:</p>

<p>```ruby
def render_comment_author(comment)
  comment.author_name
end</p>

<p>class Comment &lt; ActiveRecord::Base
  def author_name</p>

<pre><code>if user.present?
  user.name
else
  custom_name
end
</code></pre>

<p>  end
end
```</p>

<h3>No.7 Move code to Partial</h3>

<p>view code 超过两页请注意</p>

<ul>
<li>highly duplicated 内容高度重复</li>
<li>independent blocks 可以独立作为功能区块</li>
</ul>


<p>Common Case</p>

<ul>
<li>nav/user_info</li>
<li>nav/admin_menu</li>
<li>vendor_js/google_analytics</li>
<li>vendor_js/disqus_js</li>
<li>global/footer</li>
</ul>


<h3>No.8 Use presenter to clean the view</h3>

<p>使⽤ Presenter 解決 login in view 问题</p>

<p>BAD:</p>

<p><code>erb
&lt;%= if user_rofile.has_experience? &amp;&amp; user_rofile.experience_public? %&gt;
  &lt;p&gt;&lt;strong&gt;Experience:&lt;/strong&gt; &lt;%= user_profile.experience %&gt;&lt;/p&gt;
&lt;% end %&gt;
</code></p>

<p>GOOD:</p>

<p><code>erb
&lt;% user_profile.with_experience do %&gt;
  &lt;p&gt;&lt;strong&gt;Experience:&lt;/strong&gt; &lt;%= user_profile.experience %&gt;&lt;/p&gt;
&lt;% end %&gt;
&lt;% user_profile.with_hobbies do %&gt;
  &lt;p&gt;&lt;strong&gt;Hobbies:&lt;strong&gt; &lt;%= user_profile.hobbies %&gt;&lt;/p&gt;
&lt;% end %&gt;
</code></p>

<p>```ruby
class ProfilePresenter &lt; ::Presenter
  def with_experience(&amp;block)</p>

<pre><code>if profile.has_experience? &amp;&amp; profile.experience_public?
  block.call(view)
end
</code></pre>

<p>  end
end
```</p>

<p><strong>关于 presenter 的延伸阅读</strong></p>

<ul>
<li><a href="http://mikepackdev.com/blog_posts/31-exhibit-vs-presenter">Exhibit vs Presenter</a></li>
<li><a href="http://stackoverflow.com/questions/15212637/using-presenters-in-rails">Using Presenters in rails</a></li>
<li><a href="http://railscasts.com/episodes/287-presenters-from-scratch">Presenters from Scratch</a></li>
<li><a href="http://blog.jayfields.com/2007/03/rails-presenter-pattern.html">Rails: Presenter Pattern</a></li>
<li><a href="http://new-bamboo.co.uk/blog/2013/04/17/rails-presenters-skinny-everything">Rails Presenters – Skinny Everything</a></li>
</ul>


<h3>No.9 Cache Digest</h3>

<p>过去的页面缓存，我们需要自己管理版本，很难维护。新的 digest 缓存策略会自动失效。</p>

<p>BAD:</p>

<p>```erb
&lt;% cache [v15,@project] do %>
  aaa
  &lt;% cache [v10,@todo] do %></p>

<pre><code>bbb
&lt;% cache [v45,@todolist] do %&gt;
  zzz
&lt;% end %&gt;
</code></pre>

<p>  &lt;% end %>  <br/>
&lt;% end % %>
```</p>

<p>GOOD:</p>

<p>```erb
&lt;% cache @project do %>
  aaa
  &lt;% cache @todo do %></p>

<pre><code>bbb
&lt;% cache @todolist do %&gt;
  ccc
&lt;% end %&gt;
</code></pre>

<p>  &lt;% end %>
&lt;% end %>
```</p>

<p><strong>关于 Cache Digest 的延伸阅读</strong></p>

<ul>
<li><a href="https://github.com/rails/cache_digests">cache_digests on github</a></li>
<li><a href="http://railscasts.com/episodes/387-cache-digests">Cache Digests</a></li>
</ul>


<h3>No.10 Cells</h3>

<p>当同一个页面含有多个 Tab ，它会造成如下问题：</p>

<ul>
<li>Controller code 特别长，因为需要取出很多不同数据存入的变量</li>
<li>在 controller &amp; view 有性能问题不好找到</li>
<li>很难设置 action 级别的缓存</li>
</ul>


<p>BAD:</p>

<p>```ruby
class UsersController &lt; ApplicationController
  def show</p>

<pre><code>@user = User.find(params[:id])
@recent_posts = @user.recent_posts.limit(5)
@favorite_posts = @user.favorite_posts.limit(5)
@recent_comments = @user.comments.limit(5)
</code></pre>

<p>  end
end
```</p>

<p><code>erb
&lt;%= render :partial =&gt; "users/recent_post", :collection =&gt; @recent_posts %&gt;
&lt;%= render :partial =&gt; "users/favorite_post", :collection =&gt; @favorite_posts %&gt;
&lt;%= render :partial =&gt; "users/recent_comment", :collection =&gt; @recent_comments %&gt;
</code></p>

<p>GOOD:</p>

<p><code>erb
&lt;%= render_cell :user, :rencent_posts, :user =&gt; @user %&gt;
&lt;%= render_cell :user, :favorite_posts, :user =&gt; @user %&gt;
&lt;%= render_cell :user, :recent_comments, :user =&gt; @user %&gt;
</code></p>

<p>```ruby
class UsersController &lt; ApplicationController
  def show</p>

<pre><code>@user = User.find(params[:id])
</code></pre>

<p>  end
end
```</p>

<p>```ruby
class UserCell &lt; Cell::Rails
  cache :recent_posts, :expires_in => 1.hours
  cache :favorite_posts, :expires_in => 3.hours
  cache :recent_comments, :expires_in => 5.hours</p>

<p>  def recent_posts(args)
   #...
  end</p>

<p>  def favorite_posts(args)</p>

<pre><code>#...
</code></pre>

<p>  end</p>

<p>  def recent_comments(args)</p>

<pre><code>#...
</code></pre>

<p>  end
end
```</p>

<p><strong>关于 Cells 的延伸阅读</strong></p>

<ul>
<li><a href="https://github.com/apotonick/cells">cells on github</a></li>
</ul>


<h3>No.11 content_for / yield</h3>

<p>根据 Yahoo 大神的建议，应该把 javascript 和 css 代码放在页面的最下面。以便加快加载，但是会造成一些问题。比如你自定义的 js 代码比 jquery 库更早加载，以至于无法运行你的代码。</p>

<p>例子1:</p>

<p>```erb</p>

<!-- application.html.erb -->


<p>&lt;%= stylesheet_link_tag "application" %>
&lt;%= yield %>
&lt;%= javascript_include_tag "application" %>
&lt;%= yield :page_specific_javascript %></p>

<!-- main.html.erb -->


<p>&lt;%= content_for :page_specific_javascript do %>
  <script type= "text/javascript"></p>

<pre><code>your script here
</code></pre>

<p>  </script>
&lt;% end %>
```</p>

<p>例子2:</p>

<p>```erb</p>

<!-- application.html.erb -->


<div class="main">
  <%= yield %>
</div>


<div class="sidebar">
  <%= yield :sidebar %>
</div>




<!-- main.html.erb -->


<p>&lt;%= content_for :sidebar do %>
  &lt;%= render "ad/foo"%>
&lt;% end %>
```</p>

<h3>No.12 Decoration in Controller</h3>

<p>有个别情况，可以把一些代码放在 controller 中</p>

<p>BAD:</p>

<p><code>erb
&lt;%= content_for :meta do %&gt;
  &lt;meta content="xdite's blog" name="description"&gt;
  &lt;meta content="Blog.XDite.net" property="og:title"&gt;
&lt;% end %&gt;
</code></p>

<p>GOOD:</p>

<p><code>ruby
def show
  @blog = current_blog
  drop_blog_title @blog.name
  drop_blog_descption @blog.description
end
</code></p>

<p><code>erb
&lt;%= stylesheet_tag "application" %&gt;
&lt;%= render_page_title %&gt;
&lt;%= render_page_descrption %&gt;
</code></p>

<h3>No.13 Decoration using I18n</h3>

<p>善用 I18n 也可以帮你减少一部分 View 代码</p>

<p>BAD:</p>

<p>```ruby
def render_user_geneder(user)
  if user.gender == "male"</p>

<pre><code>"男 (Male)"
</code></pre>

<p>  else</p>

<pre><code>"⼥女 (Female)"
</code></pre>

<p>  end
end
```</p>

<p>GOOD:</p>

<p><code>ruby
def render_user_gender(user)
  I18n.t("users.gender_desc.#{user.geneder}")
end
</code></p>

<h3>No.14 Decoration using Decorator</h3>

<p>不要把所有代码都往 Model 中扔，下面的代码演示了一种情况，你需要格式化一种显示发布时间的方法</p>

<p>BAD:</p>

<p>```ruby</p>

<h1>first helper</h1>

<p>def render_article_publish_status(article)
  if article.published?</p>

<pre><code>"Published at #{article.published_at.strftime('%A, %B %e')}"
</code></pre>

<p>  else</p>

<pre><code>"Unpublished"
</code></pre>

<p>  end
end</p>

<h1>then model method</h1>

<p>class Article &lt; ActiveRecord::Base
  def human_publish_status</p>

<pre><code>if published?
  "Published at #{article.published_at.strftime('%A, %B %e')}"
else
  "Unpublished"
end
</code></pre>

<p>  end
end</p>

<h1>then ...</h1>

<p>class Article &lt; ActiveRecord::Base
  def human_publish_status
  end</p>

<p>  def human_publish_time
  end</p>

<p>  def human_author_name
  end
  #........
end</p>

<h1>at last</h1>

<p>class Article &lt; ActiveRecord::Base
  include HumanArticleAttributes
end
```</p>

<p>下面的代码演示使用 https://github.com/drapergem/draper 之后</p>

<p>GOOD:</p>

<p><code>erb
&lt;%= @article.publication_status %&gt;
</code></p>

<p>```ruby
class ArticleDecorator &lt; Draper::Decorator
  delegate_all
  def publication_status</p>

<pre><code>if published?
  "Published at #{published_at}"
else
  "Unpublished"
end
</code></pre>

<p>  end</p>

<p>  def published_at</p>

<pre><code>object.published_at.strftime("%A, %B %e")
</code></pre>

<p>  end
end</p>

<p>def show
  @article = Article.find(params[:id]).decorate
end
```</p>

<p><strong>关于 draper 的延伸阅读</strong></p>

<ul>
<li><a href="https://github.com/drapergem/draper">draper on github</a></li>
<li><a href="https://www.ruby-toolbox.com/categories/rails_presenters">rails_presenters gems</a></li>
</ul>


<h3>No.15 Decoration using View Object</h3>

<p>有时候，我们希望在用户中，不列出我自己</p>

<p>BAD:</p>

<p>```erb</p>

<dl class="event-detail">
  <dt>Event Host</dt>
  <dd>
    <% if @event.host == current_user %>
      You
    <% else %>
      <%= @event.host.name %>
    <% end %>
  </dd>
  <dt>Participants</dt>
  <dd>
    <%= @event.participants.reject { |p| p == current_user }.map(&:name).join(", ") %>
  </dd>
</dl>


<p>```</p>

<p>GOOD:</p>

<p>```ruby
class EventDetailView
  def initialize(template, event, current_user)</p>

<pre><code>@template = template
@event = event
@current_user = current_user
</code></pre>

<p>  end
  def host</p>

<pre><code>if @event.host == @current_user
  "You"
else
  @event.host.name
end
</code></pre>

<p>  end
  def participant_names</p>

<pre><code>participants.map(&amp;:name).join(", ")
</code></pre>

<p>  end
  private</p>

<p>  def participants</p>

<pre><code>@event.participants.reject { |p| p == @current_user }
</code></pre>

<p>  end
end
```</p>

<p>```erb</p>

<dl class="event-detail">
  <dt>Host</dt>
  <dd><%= event_detail.host %></dd>
  <dt>Participants</dt>
  <dd><%= event_detail.participant_names %></dd>
</dl>


<p>```</p>

<h3>No.16 Form builder</h3>

<ul>
<li>simple_form</li>
<li>bootstrap_form</li>
</ul>


<h3>No.17 Form Object</h3>

<p>在 FORM 中包装逻辑，而不是 model 或 controller。比如我们经常遇到的一个情况，只有同意某某条款才能继续注册表单。</p>

<p><strong>Reform</strong> Decouples your models from form validation, presentation and workflows.</p>

<p>https://github.com/apotonick/reform</p>

<h3>No.18 Policy Object / Rule Engine</h3>

<p>权限控制</p>

<p>BAD:</p>

<p>```ruby
def render_post_edit_option(post)
  if post.user == current_user || current_user.admin?</p>

<pre><code>render :partial =&gt; "post/edit_bar"
</code></pre>

<p>  end
end
```</p>

<p>针对于这种情况建议使用权限控制系统，另外近来似乎大家都从 Cancan 转移到 Pundit 去了</p>

<p><strong>Pundit</strong> Minimal authorization through OO design and pure Ruby classes</p>

<p>https://github.com/elabs/pundit</p>

<p><strong>Cancan</strong> Authorization Gem for Ruby on Rails</p>

<p>https://github.com/ryanb/cancan</p>

<h2>总结</h2>

<ul>
<li>总是假设这块正在实现的功能代码需要 decorated（修饰）</li>
<li>把逻辑移到 methods/classes</li>
<li>避免在 View/Helper 中做数据库查询</li>
<li>当代码很难懂的时候，把它抽取到一个新的控制中心比如：form object, Policy Object 之类的</li>
</ul>


<h2>延伸阅读</h2>

<ul>
<li>http://blog.xdite.net</li>
<li>https://github.com/bloudermilk/maintainable_templates http://pivotallabs.com/form-backing-objects-for-fun-and-profit/</li>
<li>http://saturnflyer.com/blog/jim/2013/10/21/how-to-make-your-code-imply-responsibilities/</li>
<li>http://objectsonrails.com/</li>
</ul>


<h2>出处</h2>

<p>以上内容由 <strong>Victor</strong> 整理，本人只是记录在blog中。</p>
]]></content>
  </entry>
  
</feed>
