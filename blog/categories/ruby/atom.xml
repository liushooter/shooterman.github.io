<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Shooter's Blog]]></title>
  <link href="http://shooterman.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://shooterman.github.io/"/>
  <updated>2014-01-13T17:14:22+08:00</updated>
  <id>http://shooterman.github.io/</id>
  <author>
    <name><![CDATA[shooter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CentOS 5.6 离线安装Ruby环境及配置项目]]></title>
    <link href="http://shooterman.github.io/blog/2013/01/03/centos-offline-install-ruby-environment/"/>
    <updated>2013-01-03T15:43:00+08:00</updated>
    <id>http://shooterman.github.io/blog/2013/01/03/centos-offline-install-ruby-environment</id>
    <content type="html"><![CDATA[<p>遇到了这么个小问题，需要把完成的railsApp打包到CentOS上，而且服务器不能联网，
ruby 环境也没有安装。一番捣鼓，步骤如下:</p>

<p><strong>没有找到离线安装rvm的方法 而且 linux版本为CentOS 5.6</strong></p>

<h3>下载源文件</h3>

<p><a href="http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p327.tar.gz">ruby-1.9.3-p327</a></p>

<p><a href="http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz">yaml-0.1.4.tar.gz</a></p>

<p><a href="http://rubygems.org/downloads/bundler-1.2.3.gem">bundler-1.2.3</a></p>

<h3>本地服务器</h3>

<h4>打包 rails app</h4>

<p>```
$ bundle package</p>

<h1>若提示没有,安装bundler并重复以上步骤</h1>

<p>$ gem install bundler
$ bundle package # 将项目所需要的gem复制到 vendor/cache
$ tar -czf   railsApp.tar.gz   railsApp #压缩打包
```</p>

<h3>远程服务器</h3>

<h4><strong>首先安装 yaml-0.1.4.tar.gz，再安装ruby</strong></h4>

<p><code>
$ tar –xzvf  yaml-0.1.4.tar.gz
$ ./configure
$ make
$ make install
</code></p>

<h4>安装ruby</h4>

<p><code>
$ tar  -xzvf  ruby-1.9.3-p327.tar.gz
$ cd ruby-1.9.3-p327
$ ./configure
$ make
$ make install
$ ruby -v   #提示即安装成功
$ gem -v    #gem已经安装
</code></p>

<h4>本地安装bundler</h4>

<p><code>
$ gem install  bundler-1.2.3.gem
$ bundle -v  #提示即安装成功
</code></p>

<h4>部署 rails app</h4>

<p><code>
$ tar  -xzvf  railsApp.tar.gz
$ cd railsApp
$ bundle install --local  #本地安装gem
</code></p>

<p><strong>注意修改配置文件</strong></p>

<pre><code>$ rails s  #测试运行
</code></pre>

<p> <a href="https://gist.github.com/4274057">分享在gist上</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby的yield和闭包]]></title>
    <link href="http://shooterman.github.io/blog/2012/09/15/the-ruby-syntax-yield-and-closure/"/>
    <updated>2012-09-15T02:06:00+08:00</updated>
    <id>http://shooterman.github.io/blog/2012/09/15/the-ruby-syntax-yield-and-closure</id>
    <content type="html"><![CDATA[<p><strong>First Blood</strong>  来些血腥凶残暴力的！
这些经常在面试中被提问，内容很多。
从面试里单独拿出来，这东西相当于神器级别，必须谨慎对待。</p>

<p>yield是ruby中一个特殊的关键字，可以调用块方法(block)，而block是ruby闭包的一种，
故将三者联系起来，yeild天生就是闭包的小跟班儿。感觉没必要单独讲，不然很割裂的赶脚。</p>

<h3><strong> ruby 闭包</strong>   block，Proc，lambda</h3>

<p><strong>block 与 yield</strong>
block 是最常用到的，有两种形式,{}和do ... end。
一般单行习惯用{}，多行用do ... end，当然这只是习惯。</p>

<p>``` ruby demo.rb
def test_yield
  yield
end</p>

<p>test_yield{ puts "this is first block." } # yield可以调用block 即{...}</p>

<p>test_yield do
  puts "this is second block."
end</p>

<p>def test2_yield<br/>
  yield("shooter")<br/>
end</p>

<p>test2_yield{ |var| puts "This args is #{var}." }</p>

<h1>传给yield的参数(此处为shooter)即对应了block中的参数(||中的部分)</h1>

<p>```</p>

<p>还可以通过 Kernel#block_given? 方法询问当前的方法调用是否包含块。
```ruby
def test
  return yield if block_given?
  puts 'no block'
end</p>

<p>test # => no block
test{ puts "Here's a block" } # => Here's a block
```</p>

<p><strong>Proc对象</strong></p>

<p>```ruby
plus = Proc.new { |x| x + 1 }
puts plus.call(2) # =>3</p>

<p>subtract = proc { |x| x - 1 }
puts subtract.call(4) # =>3
```
这被称为<strong>延迟执行</strong>(Defferred Evaluation)。</p>

<p>通过<strong>&amp;操作符</strong>，block 与 Proc对象可以相互转化。</p>

<p>```
def math_one(a, b, &amp;oper)
  puts yield(a,b)
end</p>

<p>def math_two(a, b, &amp;oper)
  puts oper.call(a,b)
end</p>

<p>math_one(2,3) { |x,y| x + y} # => 2 + 3 = 5
math_two(2,3) { |x,y| x * y} # => 2 * 3 = 6
<code>
那么这个&amp;起了什么作用？
</code>ruby
def my_method(&amp;code)
  code
end</p>

<p>p = my_method{ |name| "Hello,#{name}!"}
puts p.class # => Proc
puts p.call("shooter") # => Hello,shooter!
<code>
&amp;操作符的真正含义：Proc对象和块之间的切换符号。&amp;code是一个块，code是一个Proc对象。
简单的去掉&amp;操作符，我们就能再次得到一个Proc对象。
</code>
def proc_to_block(greeting)
  puts "#{greeting},#{yield}"
end</p>

<p>my_proc = Proc.new {"shooter!"}
puts my_proc.class
proc_to_block("Hello", &amp;my_proc)
<code>
__lambda函数__
lambda跟Proc就像两个双胞胎
</code>
plus = lambda { |x| x + 1 }
puts plus.call(2) # =>3
<code>
lambda跟Proc有两个最明显的区别: &lt;br/&gt;
1. lambda检查参数的个数，Proc不会。&lt;br/&gt;
&amp;nbsp;在Proc中，多余的参数被设为nil。但lambda中，Ruby会抛出一个ArgumentError错误。&lt;br/&gt;
2. return不同。&lt;br/&gt;
&amp;nbsp;lambda的return是返回值给方法，方法会继续执行。Proc的return会终止方法并返回得到的值。
</code>
def proc_return
  Proc.new { return "Proc.new"}.call
  return "proc_return method finished"
end</p>

<p>def lambda_return
  lambda { return "lambda" }.call
  return "lambda_return method finished"
end</p>

<p>puts proc_return    # => Proc.new
puts lambda_return # => lambda_return method finished
```
看了代码会一目了然。参考了不少资料，就是拼凑的起来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR的一些面试经验(一)]]></title>
    <link href="http://shooterman.github.io/blog/2012/09/05/interview-questions-about-the-ror/"/>
    <updated>2012-09-05T01:30:00+08:00</updated>
    <id>http://shooterman.github.io/blog/2012/09/05/interview-questions-about-the-ror</id>
    <content type="html"><![CDATA[<p> 那些天我不是在面试，就是在面试的路上，搞得很懈怠，主要还是精神上的。
 有的中规中矩;有的问题很琐碎;有的很BT,概念性的东西一股闹的全抛出来了......
 我记性不太好，对概念不感冒，倒不是从小这样，记得当年还背过视力表，
 可能三聚氰胺喝多了吧。</p>

<h3>Symbol与String</h3>

<p>在rails中经常看到Symbol，像 <code>:name  :email params[:user]</code>，
这种已:开头的变量就是Symbol对象。貌似我经常把两者混用，还有些不同的。</p>

<p><strong>创建 symbol 对象</strong>
<code>
 :foo
 :"shooter"
</code></p>

<p>在 Ruby 中每一个对象都有唯一的对象标识符（Object Identifier），可以通过 object_id 方法来得到一个对象的标识符。</p>

<p><code>
1.9.3p194 :001 &gt; 3.times{ puts :foo.object_id }
230808
230808
230808
 =&gt; 3
1.9.3p194 :002 &gt; 3.times{ puts "foo".object_id }
85823400
85823380
85823350
 =&gt; 3
</code>
一个字符串每出现一次 Ruby 就会创建一个 String对象，即便他们包含了相同的字符串内容；
而对于 Symbol 对象，一个名字（字符串内容）唯一确定一个 Symbol 对象。
Symbol 对象一旦定义将一直存在，你不能对symbol赋值，
而且在运行环境中symbol的值也不会改变，直到程序执行退出。</p>

<p><strong>相互转化</strong></p>

<p>```</p>

<h1>Symbol到String</h1>

<p>1.9.3p194 :001 > :foo.id2name
 => "foo"
1.9.3p194 :002 > :foo.to_s
 => "foo"
1.9.3p194 :003 > :"I am a rubyist"
 => :"I am a rubyist"</p>

<h1>String到Symbol</h1>

<p>1.9.3p194 :004 > "rubyist".to_sym
 => :rubyist
1.9.3p194 :005 > "rubyist".intern
 => :rubyist
```</p>

<p>从实用角度看，在一些场景下Symbol好过String只有两点：<strong>节省内存，表达简洁</strong> <br/>
通常来讲，当你面临 String 还是 Symbol 的选择时，可以参考以下标准：<br/>
&nbsp;&nbsp;如果使用字符串的内容，这个内容可能会变化，使用 String <br/>
&nbsp;&nbsp;如果使用固定的名字或者说是标识符，使用 Symbol。</p>

<p>这是第一篇，没想到一个内容就这么多，再写东西就有些多了，果断阉割了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 12.04的安装和配置(二)]]></title>
    <link href="http://shooterman.github.io/blog/2012/08/27/ubuntu-12-dot-04-installation-and-configuration/"/>
    <updated>2012-08-27T20:12:00+08:00</updated>
    <id>http://shooterman.github.io/blog/2012/08/27/ubuntu-12-dot-04-installation-and-configuration</id>
    <content type="html"><![CDATA[<p>上一篇坑挖了一半，今天一定要把坑挖好。</p>

<p>继续 <a href="http://www.modrails.com/">passenger</a>, <a href="http://wiki.nginx.org/Main">nginx</a>,
 <a href="http://www.mongodb.org/">mongodb</a>, <a href="http://redis.io/">redis</a>,
 <a href="http://nodejs.org/">Node.js</a>  的安装。</p>

<h4><strong>安装Node.js</strong></h4>

<p>配置好ruby on rails 环境后，创建一个rails 项目</p>

<p><code>
$ rails new demo
 ……
$ cd demo
$ rails s
</code>
一般会提示这样的错误，<code>Could not find a JavaScript runtime ...</code>，
具体请移步 <a href="http://stackoverflow.com/questions/8059332/could-not-find-a-javascript-runtime-see-https-github-com-sstephenson-execjs-f">stackoverflow</a></p>

<p>在ubuntu环境下，安装node.js即可</p>

<p><code>
$ sudo apt-get install nodejs
</code>
完成后再次运行项目</p>

<h4><strong>安装passenger和nginx</strong></h4>

<p>安装passenger</p>

<p><code>
$ gem install passenger
</code>
安装passenger的nginx模块，nginx一并安装，需要root，我们可以用rvmsudo</p>

<p>```
rvmsudo passenger-install-nginx-module</p>

<h1>提示哪种安装模式</h1>

<ol>
<li><p>Yes: download, compile and install Nginx for me. (recommended)</p>

<h1>完全安装</h1></li>
<li><p>No: I want to customize my Nginx installation. (for advanced users)</p>

<h1>自定义安装</h1>

<p>```
选择1，回车，进一步提示安装位置，直接回车，nginx 将安装在默认位置，即/opt/nginx。
添加nginx启动脚本，参考<a href="http://wiki.nginx.org/Nginx-init-ubuntu">这里</a>。</p></li>
</ol>


<p>```
$ sudo mv nginx /etc/init.d   # 脚本移动到 /etc/init.d
$ sudo chmod +x nginx         # 添加执行权限</p>

<p>$ sudo /etc/init.d/nginx start</p>

<h1>* Starting Nginx Server...                   [ OK ]</h1>

<p>$ sudo /etc/init.d/nginx restart</p>

<h1>* Stopping Nginx Server...                   [ OK ]</h1>

<h1>* Starting Nginx Server...                   [ OK ]</h1>

<p>$ sudo /etc/init.d/nginx stop</p>

<h1>* Stopping Nginx Server...                   [ OK ]</h1>

<p>```</p>

<p><strong>nginx的配置</strong></p>

<p>```
$ sudo vim /opt/nginx/conf/nginx.conf              # 打开配置文件
......
http {</p>

<pre><code>passenger_root ～/.rvm/gems/ruby-1.9.3-p194/gems/passenger-3.0.15;
passenger_ruby ~/.rvm/wrappers/ruby-1.9.3-p194/ruby;

include       mime.types;
default_type  application/octet-stream;
 ......
server {
    listen 80;                           #端口
    server_name  localhost;              #域名
    root ~/www/demo/public;  #项目public路径
    passenger_enabled on;
</code></pre>

<p>}
```</p>

<p>这样就可以访问 http://localhost 了</p>

<h4><strong>安装 mongodb</strong></h4>

<p><code>
$ sudo apt-get install mongodb
</code>
运行</p>

<p><code>
$ mongo
MongoDB shell version: 2.0.4
connecting to: test
</code></p>

<h4><strong>安装redis</strong></h4>

<p>下载并安装redis
<code>
wget http://redis.googlecode.com/files/redis-2.4.16.tar.gz
tar -zxf redis-2.4.16.tar.gz
cd redis-2.4.16
make
sudo make install
</code></p>

<h4><strong>安装mysql</strong></h4>

<p><code>
$ sudo apt-get install mysql-server mysql-client
</code>
全都大功告成 ^_^</p>

<p>PS 发现网页被墙了,ubuntu 也跑不了翻墙，Fuck GFW!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 12.04的安装和配置(一)]]></title>
    <link href="http://shooterman.github.io/blog/2012/08/26/ubuntu-12-dot-04-installation-and-configuration/"/>
    <updated>2012-08-26T17:26:00+08:00</updated>
    <id>http://shooterman.github.io/blog/2012/08/26/ubuntu-12-dot-04-installation-and-configuration</id>
    <content type="html"><![CDATA[<p> <a href="http://www.ubuntu.com/">Ubuntu 12.04</a> 出来有段时间了，一直没有更新，本想从11.10的系统
 直接升级，结果脆生生挂掉了，好多东西拿不出来了。杯具，重装吧！</p>

<p> 主要是 ruby on rails 和它相关联的在 ubuntu 上的安装配置。
 包括 <a href="https://rvm.io/">rvm</a> , ruby on rails, Sublime Text,
 <a href="http://www.modrails.com/">passenger</a>, <a href="http://wiki.nginx.org/Main">nginx</a>,
 <a href="http://www.mongodb.org/">mongodb</a>, <a href="http://redis.io/">redis</a> 的安装，
 顺便把 <a href="http://nodejs.org/">Node.js</a> 也装上，当作汇总了。</p>

<h2>安装Ubuntu 12-04</h2>

<p>首先准备好12.04的 iso 镜像，需要先从官网下载，我是把iso文件写入U盘后安装的。
从10.10以后，用 UltraISO 制作出来的 Ubuntu 启动盘会出现无法启动的现象，有人说 ImageWriter 很靠谱，
先用了<a href="https://github.com/downloads/openSUSE/kiwi/ImageWriter.exe">ImageWriter</a>，
不过我的本本提示没有写入权限，所以找到了<a href="https://launchpad.net/win32-image-writer/">另一个版本</a>，
 顺利写入。然后插上U盘，重启，设置从U盘启动，基本一路 next，结果手欠，装成E文的系统了。</p>

<h3>安装配置</h3>

<h4><strong>中文输入</strong></h4>

<p>12.04 的中文输入是个大问题， 即使能输入中文，在低版本的 Sublime Text 中也不能输入中文，
好在 <strong>dev版本在其他输入法下</strong> 已经ok了。</p>

<h4><strong>安装 Ruby On Rails</strong></h4>

<p>先安装一些 ruby on rails 的依赖包，听前辈们的话不会错。</p>

<p><code>
$ sudo apt-get install -y build-essential openssl curl libcurl3-dev libreadline6 libreadline6-dev git zlib1g zlib1g-dev libssl-dev libyaml-dev libxml2-dev libxslt-dev autoconf automake libtool imagemagick libmagickwand-dev libpcre3-dev libsqlite3-dev
</code>
<strong>No.1 安装 RVM</strong><br/>
<code>
 $ curl -L get.rvm.io | bash -s stable
</code>
 给 ~/.bashrc (Ubuntu) 加上脚本引用</p>

<p><code>
  $ echo '[[ -s " HOME/.rvm/scripts/rvm" ]] &amp;&amp; source " HOME/.rvm/scripts/rvm"' &gt;&gt; ~/.bashrc
</code>
 然后，重新载入那个文件</p>

<p><code>
 $ source ~/.bashrc
</code>
测试一下</p>

<p><code>
$ rvm -v
rvm 1.15.5 (stable) by Wayne E. Seguin &lt;wayneeseguin@gmail.com&gt;, Michal Papis &lt;mpapis@gmail.com&gt; [https://rvm.io/]
</code>
<strong>No.2  用 RVM 安装 Ruby 环境</strong></p>

<p>```
$ rvm list known #显示可供选择的版本</p>

<p>[ruby-]1.8.6[-p420]
[ruby-]1.8.7[-p370]
[ruby-]1.9.1[-p431]
[ruby-]1.9.2-p180
[ruby-]1.9.2-p290
[ruby-]1.9.2-p318
[ruby-]1.9.2[-p320]
[ruby-]1.9.2-head
[ruby-]1.9.3-preview1
[ruby-]1.9.3-rc1
[ruby-]1.9.3-p0
[ruby-]1.9.3-p125
[ruby-]1.9.3[-p194]
[ruby-]1.9.3-head
ruby-head
......</p>

<h1>要安装1.9.3，直接</h1>

<p>$ rvm install 1.9.3<br/>
```</p>

<p>.................. 漫长的的等待 ..................</p>

<p>Ruby 装好以后，通过 RVM 将指定版本的 Ruby 设置为系统默认版本</p>

<p><code>
$ rvm  1.9.3 --default
</code>
测试一下</p>

<p><code>
$ ruby -v
ruby 1.9.3p194 (2012-04-20 revision 35410) [i686-linux]
$ gem -v
1.8.23
</code>
<strong>No.3 安装 Rails 环境</strong></p>

<p><code>
$ gem install bundler rails
</code>
测试一下</p>

<p><code>
$ bundle -v
Bundler version 1.1.5
$ rails -v
Rails 3.2.8
</code>
 ruby on rails 的安装齐活了。</p>

<h4><strong>安装 Sublime Text</strong></h4>

<p>由于<strong>输入汉字</strong>原因，安装 Sublime Text 的dev版本，就是比较新的。
先 google 一下 Sublime Text 的ppa源，好吧，ppa暂且是什么先不管。</p>

<p><code>  
$ sudo add-apt-repository ppa:webupd8team/sublime-text-2
$ sudo apt-get update # 更新软件源
$ sudo apt-get install sublime-text-dev
</code></p>
]]></content>
  </entry>
  
</feed>
