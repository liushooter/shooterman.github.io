<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shooter's Blog]]></title>
  <link href="http://shooterman.github.com/atom.xml" rel="self"/>
  <link href="http://shooterman.github.com/"/>
  <updated>2014-01-12T14:57:03+08:00</updated>
  <id>http://shooterman.github.com/</id>
  <author>
    <name><![CDATA[shooter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CentOS 5.6 离线安装Ruby环境及配置项目]]></title>
    <link href="http://shooterman.github.com/blog/2013/01/03/centos-offline-install-ruby-environment/"/>
    <updated>2013-01-03T15:43:00+08:00</updated>
    <id>http://shooterman.github.com/blog/2013/01/03/centos-offline-install-ruby-environment</id>
    <content type="html"><![CDATA[<p>遇到了这么个小问题，需要把完成的railsApp打包到CentOS上，而且服务器不能联网，
ruby 环境也没有安装。一番捣鼓，步骤如下:</p>

<p><strong>没有找到离线安装rvm的方法 而且 linux版本为CentOS 5.6</strong></p>

<h3>下载源文件</h3>

<p><a href="http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p327.tar.gz">ruby-1.9.3-p327</a></p>

<p><a href="http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz">yaml-0.1.4.tar.gz</a></p>

<p><a href="http://rubygems.org/downloads/bundler-1.2.3.gem">bundler-1.2.3</a></p>

<h3>本地服务器</h3>

<h4>打包 rails app</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle package
</span><span class='line'>#若提示没有,安装bundler并重复以上步骤
</span><span class='line'>$ gem install bundler
</span><span class='line'>$ bundle package # 将项目所需要的gem复制到 vendor/cache
</span><span class='line'>$ tar -czf   railsApp.tar.gz   railsApp #压缩打包</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>远程服务器</h3>

<h4><strong>首先安装 yaml-0.1.4.tar.gz，再安装ruby</strong></h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tar –xzvf  yaml-0.1.4.tar.gz
</span><span class='line'>$ ./configure
</span><span class='line'>$ make
</span><span class='line'>$ make install</span></code></pre></td></tr></table></div></figure>


<h4>安装ruby</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tar  -xzvf  ruby-1.9.3-p327.tar.gz
</span><span class='line'>$ cd ruby-1.9.3-p327
</span><span class='line'>$ ./configure
</span><span class='line'>$ make
</span><span class='line'>$ make install
</span><span class='line'>$ ruby -v   #提示即安装成功
</span><span class='line'>$ gem -v    #gem已经安装</span></code></pre></td></tr></table></div></figure>


<h4>本地安装bundler</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install  bundler-1.2.3.gem
</span><span class='line'>$ bundle -v  #提示即安装成功</span></code></pre></td></tr></table></div></figure>


<h4>部署 rails app</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tar  -xzvf  railsApp.tar.gz
</span><span class='line'>$ cd railsApp
</span><span class='line'>$ bundle install --local  #本地安装gem</span></code></pre></td></tr></table></div></figure>


<p><strong>注意修改配置文件</strong></p>

<pre><code>$ rails s  #测试运行
</code></pre>

<p> <a href="https://gist.github.com/4274057">分享在gist上</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再见2012, 你好2013]]></title>
    <link href="http://shooterman.github.com/blog/2013/01/01/goodbye-2012-hello-2013/"/>
    <updated>2013-01-01T16:43:00+08:00</updated>
    <id>http://shooterman.github.com/blog/2013/01/01/goodbye-2012-hello-2013</id>
    <content type="html"><![CDATA[<p>当我还在2011憧憬2012的时候，它走到了末尾，迎来了2013，时间走的好快。</p>

<p><del>说好的末日没有来，爱情也木来 </del></p>

<p>换了新的工作，换了新的同事。</p>

<p>自从11年11月份接触ruby，至今也有1年多了。感觉进步不是很快，一直是一个人摸爬滚打，
没有真正的引路人。</p>

<h2>To Do List</h2>

<h3>Rails</h3>

<p>Rails测试框架
基本定性在已 RSpec+factory_girl为基础的测试框架，以后逐步添加其他gem。
测试效率，覆盖率，自动程度，学习难度，这几个方面考虑。</p>

<h3>Git</h3>

<p>这么潮的版本控制工具，不用实在不是我性格。
等比对了Git跟svn的优缺点，我就要转型了。</p>

<h3>论坛</h3>

<p>计划推迟了很长时间</p>

<h3>提高英语水平</h3>

<p>感觉我的水平就停留在了初中人教版，看这么多文档，费时费力，懂英语会走的更远。</p>

<h3>Python</h3>

<p>python算是ruby的兄弟语言。虽没有ruby那么灵活，但运行速度快，跨平台性好。
GUI方面比ruby强了很多。java语法太琐碎了，概念性的东西一大堆。</p>

<h3>mac mini</h3>

<p>虽然在ubuntu基本可以胜任，但在GUI方面还是mac支持的不错。
公司也不提供工作的电脑，整天扛着笔记本挤地铁，有些痛苦。
到时候可以研究下ios，当作副业，开发个app，弄点小钱也不错。</p>

<h3>ruby on arduino</h3>

<p>看见别人分享的ppt，感觉很新奇，很潮。
软件跟硬件打交道，这是最能直观体现软件价值功能的地方了。</p>

<p>arduino在<a href="http://arduino.tw/">tw</a>很火。</p>

<p><a href="http://zh.wikipedia.org/wiki/Arduino">中文wiki</a></p>

<p><a href="http://www.arduino.cc/">arduino官网</a></p>

<h3>最后  多赚钱，money才是王道啊。</h3>

<p>PS: 这本想在13年1月1日发出来的，竟然拖到了 13年12月21日。</p>

<p>补录:</p>

<p>昨天(12-20)外祖父突然去世，我的blog也能用了，这是偶然么?
愿您安息</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby的yield和闭包]]></title>
    <link href="http://shooterman.github.com/blog/2012/09/15/the-ruby-syntax-yield-and-closure/"/>
    <updated>2012-09-15T02:06:00+08:00</updated>
    <id>http://shooterman.github.com/blog/2012/09/15/the-ruby-syntax-yield-and-closure</id>
    <content type="html"><![CDATA[<p><strong>First Blood</strong>  来些血腥凶残暴力的！
这些经常在面试中被提问，内容很多。
从面试里单独拿出来，这东西相当于神器级别，必须谨慎对待。</p>

<p>yield是ruby中一个特殊的关键字，可以调用块方法(block)，而block是ruby闭包的一种，
故将三者联系起来，yeild天生就是闭包的小跟班儿。感觉没必要单独讲，不然很割裂的赶脚。</p>

<h3><strong> ruby 闭包</strong>   block，Proc，lambda</h3>

<p><strong>block 与 yield</strong>
block 是最常用到的，有两种形式,{}和do &#8230; end。
一般单行习惯用{}，多行用do &#8230; end，当然这只是习惯。</p>

<figure class='code'><figcaption><span>demo.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_yield</span>
</span><span class='line'>  <span class="k">yield</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">test_yield</span><span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;this is first block.&quot;</span> <span class="p">}</span> <span class="c1"># yield可以调用block 即{...}</span>
</span><span class='line'>
</span><span class='line'><span class="n">test_yield</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;this is second block.&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">test2_yield</span>
</span><span class='line'>  <span class="k">yield</span><span class="p">(</span><span class="s2">&quot;shooter&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">test2_yield</span><span class="p">{</span> <span class="o">|</span><span class="n">var</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;This args is </span><span class="si">#{</span><span class="n">var</span><span class="si">}</span><span class="s2">.&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="c1">#传给yield的参数(此处为shooter)即对应了block中的参数(||中的部分)</span>
</span></code></pre></td></tr></table></div></figure>


<p>还可以通过 Kernel#block_given? 方法询问当前的方法调用是否包含块。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">yield</span> <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;no block&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">test</span> <span class="c1"># =&gt; no block</span>
</span><span class='line'><span class="nb">test</span><span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Here&#39;s a block&quot;</span> <span class="p">}</span> <span class="c1"># =&gt; Here&#39;s a block</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Proc对象</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">plus</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">plus</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># =&gt;3</span>
</span><span class='line'>
</span><span class='line'><span class="n">subtract</span> <span class="o">=</span> <span class="nb">proc</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">subtract</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="c1"># =&gt;3</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这被称为<strong>延迟执行</strong>(Defferred Evaluation)。</p>

<p>通过<strong>&amp;操作符</strong>，block 与 Proc对象可以相互转化。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">math_one</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">oper</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="k">yield</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">math_two</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">oper</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">oper</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">math_one</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">}</span> <span class="c1"># =&gt; 2 + 3 = 5</span>
</span><span class='line'><span class="n">math_two</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">|</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="p">}</span> <span class="c1"># =&gt; 2 * 3 = 6</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么这个&amp;起了什么作用？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="o">&amp;</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>  <span class="n">code</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="n">my_method</span><span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="s2">&quot;Hello,</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">!&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="nb">p</span><span class="o">.</span><span class="n">class</span> <span class="c1"># =&gt; Proc</span>
</span><span class='line'><span class="nb">puts</span> <span class="nb">p</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s2">&quot;shooter&quot;</span><span class="p">)</span> <span class="c1"># =&gt; Hello,shooter!</span>
</span></code></pre></td></tr></table></div></figure>


<p>&amp;操作符的真正含义：Proc对象和块之间的切换符号。&amp;code是一个块，code是一个Proc对象。
简单的去掉&amp;操作符，我们就能再次得到一个Proc对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">proc_to_block</span><span class="p">(</span><span class="n">greeting</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">greeting</span><span class="si">}</span><span class="s2">,</span><span class="si">#{</span><span class="k">yield</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span><span class="s2">&quot;shooter!&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">my_proc</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="n">proc_to_block</span><span class="p">(</span><span class="s2">&quot;Hello&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">my_proc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>lambda函数</strong>
lambda跟Proc就像两个双胞胎</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">plus</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">plus</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># =&gt;3</span>
</span></code></pre></td></tr></table></div></figure>


<p>lambda跟Proc有两个最明显的区别: <br/>
1. lambda检查参数的个数，Proc不会。<br/>
&nbsp;在Proc中，多余的参数被设为nil。但lambda中，Ruby会抛出一个ArgumentError错误。<br/>
2. return不同。<br/>
&nbsp;lambda的return是返回值给方法，方法会继续执行。Proc的return会终止方法并返回得到的值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">proc_return</span>
</span><span class='line'>  <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;Proc.new&quot;</span><span class="p">}</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;proc_return method finished&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">lambda_return</span>
</span><span class='line'>  <span class="nb">lambda</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;lambda&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;lambda_return method finished&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">proc_return</span>    <span class="c1"># =&gt; Proc.new</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">lambda_return</span> <span class="c1"># =&gt; lambda_return method finished</span>
</span></code></pre></td></tr></table></div></figure>


<p>看了代码会一目了然。参考了不少资料，就是拼凑的起来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR的一些面试经验(一)]]></title>
    <link href="http://shooterman.github.com/blog/2012/09/05/interview-questions-about-the-ror/"/>
    <updated>2012-09-05T01:30:00+08:00</updated>
    <id>http://shooterman.github.com/blog/2012/09/05/interview-questions-about-the-ror</id>
    <content type="html"><![CDATA[<p> 那些天我不是在面试，就是在面试的路上，搞得很懈怠，主要还是精神上的。
 有的中规中矩;有的问题很琐碎;有的很BT,概念性的东西一股闹的全抛出来了&#8230;&#8230;
 我记性不太好，对概念不感冒，倒不是从小这样，记得当年还背过视力表，
 可能三聚氰胺喝多了吧。</p>

<h3>Symbol与String</h3>

<p>在rails中经常看到Symbol，像 <code>:name  :email params[:user]</code>，
这种已:开头的变量就是Symbol对象。貌似我经常把两者混用，还有些不同的。</p>

<p><strong>创建 symbol 对象</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> :foo
</span><span class='line'> :"shooter"</span></code></pre></td></tr></table></div></figure>


<p>在 Ruby 中每一个对象都有唯一的对象标识符（Object Identifier），可以通过 object_id 方法来得到一个对象的标识符。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.9.3p194 :001 &gt; 3.times{ puts :foo.object_id }
</span><span class='line'>230808
</span><span class='line'>230808
</span><span class='line'>230808
</span><span class='line'> =&gt; 3 
</span><span class='line'>1.9.3p194 :002 &gt; 3.times{ puts "foo".object_id }
</span><span class='line'>85823400
</span><span class='line'>85823380
</span><span class='line'>85823350
</span><span class='line'> =&gt; 3 </span></code></pre></td></tr></table></div></figure>


<p>一个字符串每出现一次 Ruby 就会创建一个 String对象，即便他们包含了相同的字符串内容；
而对于 Symbol 对象，一个名字（字符串内容）唯一确定一个 Symbol 对象。
Symbol 对象一旦定义将一直存在，你不能对symbol赋值，
而且在运行环境中symbol的值也不会改变，直到程序执行退出。</p>

<p><strong>相互转化</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Symbol到String
</span><span class='line'>
</span><span class='line'>1.9.3p194 :001 &gt; :foo.id2name
</span><span class='line'> =&gt; "foo" 
</span><span class='line'>1.9.3p194 :002 &gt; :foo.to_s
</span><span class='line'> =&gt; "foo" 
</span><span class='line'>1.9.3p194 :003 &gt; :"I am a rubyist"
</span><span class='line'> =&gt; :"I am a rubyist" 
</span><span class='line'>
</span><span class='line'># String到Symbol
</span><span class='line'>
</span><span class='line'>1.9.3p194 :004 &gt; "rubyist".to_sym
</span><span class='line'> =&gt; :rubyist 
</span><span class='line'>1.9.3p194 :005 &gt; "rubyist".intern
</span><span class='line'> =&gt; :rubyist </span></code></pre></td></tr></table></div></figure>


<p>从实用角度看，在一些场景下Symbol好过String只有两点：<strong>节省内存，表达简洁</strong> <br/>
通常来讲，当你面临 String 还是 Symbol 的选择时，可以参考以下标准：<br/>
&nbsp;&nbsp;如果使用字符串的内容，这个内容可能会变化，使用 String <br/>
&nbsp;&nbsp;如果使用固定的名字或者说是标识符，使用 Symbol。</p>

<p>这是第一篇，没想到一个内容就这么多，再写东西就有些多了，果断阉割了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[翻越GFW 走向世界]]></title>
    <link href="http://shooterman.github.com/blog/2012/08/31/across-the-great-wall/"/>
    <updated>2012-08-31T05:02:00+08:00</updated>
    <id>http://shooterman.github.com/blog/2012/08/31/across-the-great-wall</id>
    <content type="html"><![CDATA[<p>&#8220;Across the Great Wall we can reach every corner in the world.&#8221;</p>

<p>中国不愧为文明古国，早有先见之明，古有长城，今有×××，人们乐此不疲的到墙外透透气儿。
不知何时翻墙也晋升为程序猿的基本功——仅是个人观点。</p>

<p>在ubuntu用GAE翻墙，简单经济实惠。适合我这种不想买VPN又想看外面的人。
我翻墙更多是浏览网页，基本用不到全局代理，我的标配是chrome和它的一个插件Proxy SwitchySharp。</p>

<h4><strong>安装chrome</strong></h4>

<p>尽管有Firefox，大爱还是chrome，先下载最新的deb安装包，然后</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo dpkg -i  google-chrome-stable_current_i386.deb
</span><span class='line'>  # 提示没有安装所需要的依赖包
</span><span class='line'>$ sudo apt-get -f install 
</span><span class='line'>  # 安装依赖包
</span><span class='line'>$ sudo dpkg -i  google-chrome-stable_current_i386.deb</span></code></pre></td></tr></table></div></figure>


<p>让我感觉最恐怖的是，chrome 关联好账户后，那些配置和书签都在了。My privacy!</p>

<h4><strong>注册Google App Engine帐号</strong></h4>

<p>1.用Google账户登录<a href="http://code.google.com/appengine/">Google App Engine</a>后，
点击Create an Application创建一个应用程序。</p>

<p>2.输入手机号码，接受创建验证码，必须有此过程，否则无法注册成功。</p>

<p>3.输入验证码后就进入了创建应用程序的详细设置界面。
 填写Application Identifier和Application Title以及勾选同意服务条款，点 Save 即完成创建。
  <strong>在这里把Application Identifier称为app_id</strong>。</p>

<h4><strong> SDK &amp;&amp;fetchserver &amp;&amp;localproxy</strong></h4>

<p>1.下载 <a href="http://googleappengine.googlecode.com/files/google_appengine_1.7.1.zip">Google App Engine SDK</a>，
这是python版的SDK，因为ubuntu自带了python，解压sdk到任意文件夹。</p>

<p>2.在<a href="http://code.google.com/p/gappproxy/downloads/list">这里</a>，
下载对应的localproxy和fetchserver的linux版本。
<strong>解压fetchserver文件夹至Google App Engine SDK目录</strong>。</p>

<p>3.打开fetchserver文件夹内的app.yaml文件，修改第一行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>application: your_application_name</span></code></pre></td></tr></table></div></figure>


<p>your_application_name改为刚才输入的app_id，
再打开localproxy文件夹的proxy.conf文件，修改最后一行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#fetch_server = http://your-fetch-server.appspot.com/fetch.py</span></code></pre></td></tr></table></div></figure>


<p>去掉#，your-fetch-serve改为刚才输入的app_id。</p>

<p> 4.上传fetchserver：进入Google App Engine SDK目录，运行命令appcfg.py update fetchserver，会要求你输入Google 账户及密码，之后关闭结束上传。</p>

<p> 5.运行proxy.py。</p>

<p> 进入localproxy文件夹，然后
 <code>
 $ python proxy.py
</code></p>

<h4><strong>安装Proxy SwitchySharp插件</strong></h4>

<p>从Chrome 网上应用店安装Proxy SwitchySharp，配置 HTTP Proxy 为 127.0.0.1 ，Port 为8000。
然后保存。被墙的时候，点击Proxy SwitchySharp，刷新页面即可。</p>

<h4><strong>快捷方式</strong></h4>

<p>若每次都要翻墙都要用到命令行，一定会吐血。我用到一个简单的方法，就是给文件添加链接到桌面</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#文件添加执行权限
</span><span class='line'>$ sudo chmod +x proxy.py
</span><span class='line'># 添加链接
</span><span class='line'>$ ln ~/GFW/localproxy-2.0.0/proxy.py  ~/Desktop/killer</span></code></pre></td></tr></table></div></figure>


<p>只要在桌面双击killer即可。</p>

<p>今天是农历七月十五，有些想妈妈了，愿她一切都好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 12.04的安装和配置(二)]]></title>
    <link href="http://shooterman.github.com/blog/2012/08/27/ubuntu-12-dot-04-installation-and-configuration/"/>
    <updated>2012-08-27T20:12:00+08:00</updated>
    <id>http://shooterman.github.com/blog/2012/08/27/ubuntu-12-dot-04-installation-and-configuration</id>
    <content type="html"><![CDATA[<p>上一篇坑挖了一半，今天一定要把坑挖好。</p>

<p>继续 <a href="http://www.modrails.com/">passenger</a>, <a href="http://wiki.nginx.org/Main">nginx</a>,
 <a href="http://www.mongodb.org/">mongodb</a>, <a href="http://redis.io/">redis</a>,
 <a href="http://nodejs.org/">Node.js</a>  的安装。</p>

<h4><strong>安装Node.js</strong></h4>

<p>配置好ruby on rails 环境后，创建一个rails 项目</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rails new demo
</span><span class='line'> ……
</span><span class='line'>$ cd demo
</span><span class='line'>$ rails s</span></code></pre></td></tr></table></div></figure>


<p>一般会提示这样的错误，<code>Could not find a JavaScript runtime ...</code>，
具体请移步 <a href="http://stackoverflow.com/questions/8059332/could-not-find-a-javascript-runtime-see-https-github-com-sstephenson-execjs-f">stackoverflow</a></p>

<p>在ubuntu环境下，安装node.js即可</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install nodejs</span></code></pre></td></tr></table></div></figure>


<p>完成后再次运行项目</p>

<h4><strong>安装passenger和nginx</strong></h4>

<p>安装passenger</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install passenger</span></code></pre></td></tr></table></div></figure>


<p>
安装passenger的nginx模块，nginx一并安装，需要root，我们可以用rvmsudo</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvmsudo passenger-install-nginx-module
</span><span class='line'># 提示哪种安装模式
</span><span class='line'>
</span><span class='line'>1. Yes: download, compile and install Nginx for me. (recommended)
</span><span class='line'> # 完全安装
</span><span class='line'> 
</span><span class='line'>2. No: I want to customize my Nginx installation. (for advanced users)
</span><span class='line'> # 自定义安装</span></code></pre></td></tr></table></div></figure>


<p>选择1，回车，进一步提示安装位置，直接回车，nginx 将安装在默认位置，即/opt/nginx。
添加nginx启动脚本，参考<a href="http://wiki.nginx.org/Nginx-init-ubuntu">这里</a>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo mv nginx /etc/init.d   # 脚本移动到 /etc/init.d
</span><span class='line'>$ sudo chmod +x nginx         # 添加执行权限
</span><span class='line'>
</span><span class='line'>$ sudo /etc/init.d/nginx start
</span><span class='line'># * Starting Nginx Server...                   [ OK ]
</span><span class='line'>
</span><span class='line'>$ sudo /etc/init.d/nginx restart
</span><span class='line'># * Stopping Nginx Server...                   [ OK ]
</span><span class='line'># * Starting Nginx Server...                   [ OK ]
</span><span class='line'>
</span><span class='line'>$ sudo /etc/init.d/nginx stop
</span><span class='line'># * Stopping Nginx Server...                   [ OK ]</span></code></pre></td></tr></table></div></figure>


<p><strong>nginx的配置</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo vim /opt/nginx/conf/nginx.conf              # 打开配置文件
</span><span class='line'>......
</span><span class='line'>http {
</span><span class='line'>    passenger_root ～/.rvm/gems/ruby-1.9.3-p194/gems/passenger-3.0.15;
</span><span class='line'>    passenger_ruby ~/.rvm/wrappers/ruby-1.9.3-p194/ruby;
</span><span class='line'>
</span><span class='line'>    include       mime.types;
</span><span class='line'>    default_type  application/octet-stream;
</span><span class='line'>     ......
</span><span class='line'>    server {
</span><span class='line'>        listen 80;                           #端口
</span><span class='line'>        server_name  localhost;              #域名
</span><span class='line'>        root ~/www/demo/public;  #项目public路径
</span><span class='line'>        passenger_enabled on;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这样就可以访问 http://localhost 了</p>

<h4><strong>安装 mongodb</strong></h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install mongodb</span></code></pre></td></tr></table></div></figure>


<p>运行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mongo
</span><span class='line'>MongoDB shell version: 2.0.4
</span><span class='line'>connecting to: test</span></code></pre></td></tr></table></div></figure>


<h4><strong>安装redis</strong></h4>

<p>下载并安装redis</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://redis.googlecode.com/files/redis-2.4.16.tar.gz
</span><span class='line'>tar -zxf redis-2.4.16.tar.gz
</span><span class='line'>cd redis-2.4.16 
</span><span class='line'>make 
</span><span class='line'>sudo make install</span></code></pre></td></tr></table></div></figure>


<h4><strong>安装mysql</strong></h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install mysql-server mysql-client</span></code></pre></td></tr></table></div></figure>


<p>全都大功告成 ^_^</p>

<p>PS 发现网页被墙了,ubuntu 也跑不了翻墙，Fuck GFW!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 12.04的安装和配置(一)]]></title>
    <link href="http://shooterman.github.com/blog/2012/08/26/ubuntu-12-dot-04-installation-and-configuration/"/>
    <updated>2012-08-26T17:26:00+08:00</updated>
    <id>http://shooterman.github.com/blog/2012/08/26/ubuntu-12-dot-04-installation-and-configuration</id>
    <content type="html"><![CDATA[<p> <a href="http://www.ubuntu.com/">Ubuntu 12.04</a> 出来有段时间了，一直没有更新，本想从11.10的系统
 直接升级，结果脆生生挂掉了，好多东西拿不出来了。杯具，重装吧！</p>

<p> 主要是 ruby on rails 和它相关联的在 ubuntu 上的安装配置。
 包括 <a href="https://rvm.io/">rvm</a> , ruby on rails, Sublime Text,
 <a href="http://www.modrails.com/">passenger</a>, <a href="http://wiki.nginx.org/Main">nginx</a>,
 <a href="http://www.mongodb.org/">mogoDB</a>, <a href="http://redis.io/">redis</a> 的安装，
 顺便把 <a href="http://nodejs.org/">Node.js</a> 也装上，当作汇总了。</p>

<h2>安装Ubuntu 12-04</h2>

<p>首先准备好12.04的 iso 镜像，需要先从官网下载，我是把iso文件写入U盘后安装的。
从10.10以后，用 UltraISO 制作出来的 Ubuntu 启动盘会出现无法启动的现象，有人说 ImageWriter 很靠谱，
先用了<a href="https://github.com/downloads/openSUSE/kiwi/ImageWriter.exe">ImageWriter</a>，
不过我的本本提示没有写入权限，所以找到了<a href="https://launchpad.net/win32-image-writer/">另一个版本</a>，
 顺利写入。然后插上U盘，重启，设置从U盘启动，基本一路 next，结果手欠，装成E文的系统了。</p>

<h3>安装配置</h3>

<h4><strong>中文输入</strong></h4>

<p>12.04 的中文输入是个大问题， 即使能输入中文，在低版本的 Sublime Text 中也不能输入中文，
好在 <strong>dev版本在其他输入法下</strong> 已经ok了。</p>

<h4><strong>安装 Ruby On Rails</strong></h4>

<p>先安装一些 ruby on rails 的依赖包，听前辈们的话不会错。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install -y build-essential openssl curl libcurl3-dev libreadline6 libreadline6-dev git zlib1g zlib1g-dev libssl-dev libyaml-dev libxml2-dev libxslt-dev autoconf automake libtool imagemagick libmagickwand-dev libpcre3-dev libsqlite3-dev</span></code></pre></td></tr></table></div></figure>


<p><strong>No.1 安装 RVM</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ curl -L get.rvm.io | bash -s stable </span></code></pre></td></tr></table></div></figure>


<p> 给 ~/.bashrc (Ubuntu) 加上脚本引用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ echo '[[ -s " HOME/.rvm/scripts/rvm" ]] && source " HOME/.rvm/scripts/rvm"' &gt;&gt; ~/.bashrc</span></code></pre></td></tr></table></div></figure>


<p> 然后，重新载入那个文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ source ~/.bashrc </span></code></pre></td></tr></table></div></figure>


<p>测试一下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm -v
</span><span class='line'>rvm 1.15.5 (stable) by Wayne E. Seguin &lt;wayneeseguin@gmail.com&gt;, Michal Papis &lt;mpapis@gmail.com&gt; [https://rvm.io/]</span></code></pre></td></tr></table></div></figure>


<p><strong>No.2  用 RVM 安装 Ruby 环境</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm list known #显示可供选择的版本
</span><span class='line'>
</span><span class='line'>[ruby-]1.8.6[-p420]
</span><span class='line'>[ruby-]1.8.7[-p370]
</span><span class='line'>[ruby-]1.9.1[-p431]
</span><span class='line'>[ruby-]1.9.2-p180
</span><span class='line'>[ruby-]1.9.2-p290
</span><span class='line'>[ruby-]1.9.2-p318
</span><span class='line'>[ruby-]1.9.2[-p320]
</span><span class='line'>[ruby-]1.9.2-head
</span><span class='line'>[ruby-]1.9.3-preview1
</span><span class='line'>[ruby-]1.9.3-rc1
</span><span class='line'>[ruby-]1.9.3-p0
</span><span class='line'>[ruby-]1.9.3-p125
</span><span class='line'>[ruby-]1.9.3[-p194]
</span><span class='line'>[ruby-]1.9.3-head
</span><span class='line'>ruby-head
</span><span class='line'>......
</span><span class='line'>
</span><span class='line'># 要安装1.9.3，直接
</span><span class='line'>$ rvm install 1.9.3  </span></code></pre></td></tr></table></div></figure>


<p>&#8230;&#8230;&#8230;&#8230;&#8230;&#8230; 漫长的的等待 &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;</p>

<p>Ruby 装好以后，通过 RVM 将指定版本的 Ruby 设置为系统默认版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm  1.9.3 --default </span></code></pre></td></tr></table></div></figure>


<p>测试一下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby -v
</span><span class='line'>ruby 1.9.3p194 (2012-04-20 revision 35410) [i686-linux]
</span><span class='line'>$ gem -v
</span><span class='line'>1.8.23</span></code></pre></td></tr></table></div></figure>


<p><strong>No.3 安装 Rails 环境</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install bundler rails</span></code></pre></td></tr></table></div></figure>


<p>测试一下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle -v
</span><span class='line'>Bundler version 1.1.5
</span><span class='line'>$ rails -v
</span><span class='line'>Rails 3.2.8</span></code></pre></td></tr></table></div></figure>


<p> ruby on rails 的安装齐活了。</p>

<h4><strong>安装 Sublime Text</strong></h4>

<p>由于<strong>输入汉字</strong>原因，安装 Sublime Text 的dev版本，就是比较新的。
先 google 一下 Sublime Text 的ppa源，好吧，ppa暂且是什么先不管。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo add-apt-repository ppa:webupd8team/sublime-text-2
</span><span class='line'>$ sudo apt-get update # 更新软件源
</span><span class='line'>$ sudo apt-get install sublime-text-dev</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我用到的 Sublime Text 2 插件]]></title>
    <link href="http://shooterman.github.com/blog/2012/08/08/my-sublime-text-2-plugin-summary/"/>
    <updated>2012-08-08T20:24:00+08:00</updated>
    <id>http://shooterman.github.com/blog/2012/08/08/my-sublime-text-2-plugin-summary</id>
    <content type="html"><![CDATA[<p> <a href="http://www.sublimetext.com/">Sublime Text 2</a> 是在俺剛學習<strong>Ruby</strong>時大大們極力推薦的，真的超贊。
 Sublime Text是用<a href="http://zh.wikipedia.org/zh/Python">python语言</a>编写。如果熟悉<a href="http://www.python.org/">python</a>，你也可以编写插件實現自己想要的功能。目前插件集中在github上，需要在线安装。安装插件前需要 <strong>安装包控制(Package Control)</strong></p>

<h3>安装包控制(Package Control)</h3>

<ul>
<li>打开Sublime Text 2，按下  <code>Ctrl+`</code> 调出 Console。</li>
<li>将以下代码粘贴进命令行中并回车:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import urllib2,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read())</span></code></pre></td></tr></table></div></figure>


<ul>
<li>重启 Sublime Text 2，如果在 <code>Preferences -&gt; Package Settings</code>中见到
 <code>Package Control</code>这一项，就说明安装成功了。</li>
</ul>


<h3>使用 Package Control 安装插件</h3>

<ul>
<li><p>按下<code>Ctrl+Shift+P</code>，调出窗口</p></li>
<li><p>在输入框中输入<code>install</code>，将智能模糊提示，光标选中 <code>Package Control: Install Package</code>，果断回车</p></li>
<li><p>在新弹出的窗口中，(假设SublimeREPL)，直接将插件名(如 SublimeREPL)复制到输入框中</p></li>
<li><p>大功告成，有时特殊情况，需要在第二步前，先通过输入repository 添加插件的url，重复第二步，然后真正的ok。
<strong>MarkdownEditing</strong> 是这样滴情况。</p></li>
</ul>


<h3>我的插件集</h3>

<p>俗话就说嘛 好记性不如烂笔头 ^_^</p>

<ul>
<li><p><a href="https://github.com/condemil/Gist">Gist</a>  gist代码分享</p></li>
<li><p><a href="https://github.com/wuub/SublimeREPL">SublimeREPL</a>
将 Ruby Shell (即 IRB)整合到 Sublime Text 中,而且集成了 node coffeescript lua 等，不过需要配置好环境，
偶的只有irb，其他都是提示错误。</p></li>
<li><p><a href="http://ttscoff.github.com/MarkdownEditing/">MarkdownEditing</a>   markdown编辑插件</p></li>
<li><p><a href="https://github.com/revolunet/sublimetext-markdown-preview">Markdown Preview</a> markdown预览插件</p></li>
</ul>


<p>感觉每个插件都大有搞头的样子 ，以后再说吧。</p>

<p>PS: 第一次写东西，刚刚上手<a href="http://markdown.tw/">markdown</a>，参考了网上n多资料，还要亲手尝试一遍，恨费工夫和精力，好在没有神马意外情况。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Blog]]></title>
    <link href="http://shooterman.github.com/blog/2012/07/24/my-first-blog/"/>
    <updated>2012-07-24T21:33:00+08:00</updated>
    <id>http://shooterman.github.com/blog/2012/07/24/my-first-blog</id>
    <content type="html"><![CDATA[<p>我的Blog开张了！</p>
]]></content>
  </entry>
  
</feed>
