<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shooter's Blog]]></title>
  <link href="http://shooterman.github.io/atom.xml" rel="self"/>
  <link href="http://shooterman.github.io/"/>
  <updated>2014-01-13T17:51:05+08:00</updated>
  <id>http://shooterman.github.io/</id>
  <author>
    <name><![CDATA[shooter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2013年年终总结]]></title>
    <link href="http://shooterman.github.io/blog/2014/01/12/2013-summary/"/>
    <updated>2014-01-12T15:48:29+08:00</updated>
    <id>http://shooterman.github.io/blog/2014/01/12/2013-summary</id>
    <content type="html"><![CDATA[<p>匆匆忙忙的一年又过去了, 万分感慨，时间过得好快。今天好好总结一下。</p>

<h3>跨年晚上写在Evernote的总结:</h3>

<p>每每感觉时间过得好快，尤其是今年，可能岁数越大越觉得时间过得快。
今年喜忧参半。</p>

<h4>最难过的事：</h4>

<p>姥爷在12月20日晚上突然去世，我们都没在身边，是满满的愧疚。
中秋节，专门回老家，去看了看他们，过程不算愉快吧，没想到竟是最后一面！</p>

<h4>最开心的事：</h4>

<p>找到了她，也许真的是上辈子的缘分，自然而然的在一起了，
我的忧伤与欢乐有她分享了。</p>

<h4>最尴尬的事：</h4>

<p>2013年4月底从公司辞职，其实早有准备，
与公司的文化、开发团队的理念合不来，捱过这半年很痛苦。
不过缓解了我的经济压力，买了mac mini 当开发机。</p>

<p>接下来的3个月找工作，先去了趟青岛，高高兴兴的玩了一阵，然后回到北京找工作。
在找工作的这段期间，暴露了很多问题： 算法是永远的痛，表达的思路不是很清楚 &#8230;&#8230;</p>

<hr />

<h3>今日总结:</h3>

<p>针对算法的短板，我找到了 <a href="http://projecteuler.net/">projecteuler</a>，
做了一些练习题,放到了<a href="https://github.com/shooterman/projecteuler.net">我的github的project中</a>。
对我来说挑战不小，而且之后因为工作的原因，也做不下去了。
<strong>抽出时间继续做 projecteuler</strong>，
对于难的问题，一周完成一个还不行么，这么低的要求，还完成不了么?</p>

<p><strong>写blog要勤快</strong>， 写blog也是一种锻炼思维的方式。</p>

<p>发现一本涉及ruby底层的书 <a href="http://patshaughnessy.net/ruby-under-a-microscope">Ruby Under a Microscope</a>，很赞，纯英文，还可以提高英语水平。
<strong>读完 Ruby Under a Microscope</strong>。</p>

<p><strong>积极锻炼身体</strong>，现在体重涨了，再不加强锻炼，以后咋面对媳妇！？ 基本上没经验，
一定要现在起步，从长计议。</p>

<p><strong>完成个人的一个小项目或者接一个小的外包</strong> ， 2013最缺什么，money!</p>

<p>对于表达交流上的问题，有意识的去控制语速，列出提纲，多参加一些交流活动。
前段时间参加了rails girls，当coach，是一种不错的锻炼。
有时间的话，一定要<strong>多参加活动</strong>，积累好人缘。</p>

<p><strong>希望我和她幸福快乐</strong></p>

<p>PS:  GF生病发烧了，我不在身边，快点好起来吧！阿门</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写出好的 Commit Message]]></title>
    <link href="http://shooterman.github.io/blog/2013/11/22/5-useful-tips-for-a-better-commit-message/"/>
    <updated>2013-11-22T16:39:16+08:00</updated>
    <id>http://shooterman.github.io/blog/2013/11/22/5-useful-tips-for-a-better-commit-message</id>
    <content type="html"><![CDATA[<h2>为什幺要关注提交信息</h2>

<ul>
<li>加快 Reviewing Code 的过程</li>
<li>帮助我们写好 release note</li>
<li>5年后帮你快速想起来某个分支，tag 或者 commit 增加了什么功能，改变了哪些代码</li>
<li>让其他的开发者在运行 <code>git blame</code> 的时候想跪谢</li>
<li>总之一个好的提交信息，会帮助你提高项目的整体质量</li>
</ul>


<h2>基本要求</h2>

<ul>
<li>第一行应该少于50个字。 <strong>随后是一个空行</strong> 第一行题目也可以写成：<code>Fix issue #8976</code></li>
<li>喜欢用 vim 的哥们把下面这行代码加入 <em>.vimrc</em> 文件中，来检查拼写和自动折行</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>autocmd Filetype gitcommit setlocal spell textwidth=72</span></code></pre></td></tr></table></div></figure>


<ul>
<li>永远不在 <code>git commit</code> 上增加 <code>-m &lt;msg&gt;</code> 或 <code>--message=&lt;msg&gt;</code> 参数，而单独写提交信息</li>
</ul>


<p>一个不好的例子 <code>git commit -m "Fix login bug"</code></p>

<p>一个推荐的 commit message 应该是这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Redirect user to the requested page after login
</span><span class='line'>
</span><span class='line'>https://trello.com/path/to/relevant/card
</span><span class='line'>
</span><span class='line'>Users were being redirected to the home page after login, which is less
</span><span class='line'>useful than redirecting to the page they had originally requested before
</span><span class='line'>being redirected to the login form.
</span><span class='line'>
</span><span class='line'>* Store requested path in a session variable
</span><span class='line'>* Redirect to the stored location after successfully logging in the user</span></code></pre></td></tr></table></div></figure>


<ul>
<li>注释最好包含一个连接指向你们项目的 issue/story/card。一个完整的连接比一个 issue numbers 更好</li>
<li>提交信息中包含一个简短的故事，能让别人更容易理解你的项目</li>
</ul>


<h2>注释要回答如下信息</h2>

<p><strong>为什么这次修改是必要的？</strong></p>

<p>要告诉 Reviewers，你的提交包含什么改变。让他们更容易审核代码和忽略无关的改变。</p>

<p><strong>如何解决的问题？</strong></p>

<p>这可不是说技术细节。看下面的两个例子：</p>

<p><code>Introduce a red/black tree to increase search speed</code></p>

<p><code>Remove &lt;troublesome gem X&gt;, which was causing &lt;specific description of issue introduced by gem&gt;</code></p>

<p>如果你的修改特别明显，就可以忽略这个。</p>

<p><strong>这些变化可能影响哪些地方？</strong></p>

<p>这是你最需要回答的问题。因为它会帮你你发现在某个 branch 或 commit 中的做了过多的改动。一个提交尽量只做1，2个变化。</p>

<p>你的团队应该有一个自己的行为规则，规定每个 commit 和 branch 最多能含有多少个功能修改。</p>

<h2>小提示</h2>

<ul>
<li>使用 <em>fix</em>, <em>add</em>, <em>change</em> 而不是 <em>fixed</em>, <em>added</em>, <em>changed</em></li>
<li>永远别忘了第2行是空行</li>
<li>用 <em>Line break</em> 来分割提交信息，让它在某些软件里面更容易读</li>
</ul>


<h2>例子</h2>

<pre><code>Fix bug where user can't signup.

[Bug #2873942]

Users were unable to register if they hadn't visited the plans
and pricing page because we expected that tracking
information to exist for the logs we create after a user
signs up.  I fixed this by adding a check to the logger
to ensure that if that information was not available
we weren't trying to write it.
</code></pre>

<br/>


<pre><code>Redirect user to the requested page after login

https://trello.com/path/to/relevant/card

Users were being redirected to the home page after login, which is less
useful than redirecting to the page they had originally requested before
being redirected to the login form.

* Store requested path in a session variable
* Redirect to the stored location after successfully logging in the user
</code></pre>

<h2>延伸阅读</h2>

<ul>
<li><a href="http://web-design-weekly.com/blog/2013/09/01/a-better-git-commit/">A Note About Git Commit Messages</a></li>
<li><a href="http://ablogaboutcode.com/2011/03/23/proper-git-commit-messages-and-an-elegant-git-history/">Writing good commit messages</a></li>
<li><a href="https://github.com/erlang/otp/wiki/Writing-good-commit-messages">Proper Git Commit Messages and an Elegant Git History</a></li>
<li><a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">A Better Git Commit</a></li>
<li><a href="http://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message">5 Useful Tips For A Better Commit Message </a></li>
<li><a href="http://whatthecommit.com/">好玩的提交信息</a></li>
</ul>


<hr />

<h2>出处</h2>

<p>文章由 <strong>Victor</strong> 翻译，并发表在<a href="http://ruby-china.org/topics/15737">ruby-china</a>上。
本人只是伸手党</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails使用队列resque]]></title>
    <link href="http://shooterman.github.io/blog/2013/11/08/resque-for-rails/"/>
    <updated>2013-11-08T12:13:40+08:00</updated>
    <id>http://shooterman.github.io/blog/2013/11/08/resque-for-rails</id>
    <content type="html"><![CDATA[<h3>准备</h3>

<p><a href="https://github.com/resque/resque">Resque</a> 依赖 <a href="http://redis.io/">Redis</a>，
请先安装reids数据库。</p>

<hr />

<h3>安装Resque</h3>

<pre><code>gem "resque", "~&gt; 1.25.1"
</code></pre>

<p>运行 resque-web 会打开 http://0.0.0.0:5678/overview</p>

<h5>创建Rake</h5>

<p>lib/tasks/resque.rake</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;resque/tasks&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span> <span class="s2">&quot;resque:setup&quot;</span> <span class="o">=&gt;</span> <span class="ss">:environment</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># task &quot;resque:setup&quot; =&gt; :environment do</span>
</span><span class='line'>  <span class="c1">#   ENV[&#39;QUEUE&#39;] = &quot;*&quot;</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>  <span class="c1"># 执行 rake resque:work 会启动所有队列</span>
</span></code></pre></td></tr></table></div></figure>


<h5>创建任务</h5>

<p>app/workers/resque_job.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ResqueJob</span>
</span><span class='line'>  <span class="vi">@queue</span> <span class="o">=</span> <span class="ss">:resque_job</span> <span class="c1">#定义队列名称</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">perform</span><span class="p">(</span><span class="n">u_name</span><span class="p">)</span> <span class="c1">#必须定义 执行方法体</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;hello </span><span class="si">#{</span><span class="n">u_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h5>启动 queue</h5>

<p>rake resque:work QUEUE=&#8217;*&#8217; #启动所有队列</p>

<p>rake resque:work QUEUE=&#8217;resque_job&#8217; #启动队列名称为resque_job的单个队列</p>

<h5>调用 queue</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Resque</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="no">ResqueJob</span><span class="p">,</span><span class="s2">&quot;everyone&quot;</span><span class="p">)</span> <span class="c1">#调用队列</span>
</span></code></pre></td></tr></table></div></figure>


<h4>项目中查看resque任务</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;resque&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.25.1&quot;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="s2">&quot;resque/server&quot;</span>
</span><span class='line'><span class="n">mount</span> <span class="ss">Resque</span><span class="p">:</span><span class="ss">:Server</span><span class="p">,</span> <span class="ss">:at</span> <span class="o">=&gt;</span> <span class="s2">&quot;/resque&quot;</span> <span class="c1"># routes.rb</span>
</span></code></pre></td></tr></table></div></figure>


<p>访问 http://0.0.0.0:3000/resque/overview</p>

<h4>限制访问</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># config/initializers/resque_auth.rb</span>
</span><span class='line'>  <span class="ss">Resque</span><span class="p">:</span><span class="ss">:Server</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="ss">Rack</span><span class="p">:</span><span class="ss">:Auth</span><span class="o">::</span><span class="no">Basic</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="p">,</span> <span class="n">password</span><span class="o">|</span>
</span><span class='line'>    <span class="n">password</span> <span class="o">==</span> <span class="s2">&quot;password&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>Redis 命令行</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">redis</span><span class="o">-</span><span class="n">server</span> <span class="c1">#Redis服务器的daemon启动程序</span>
</span><span class='line'>
</span><span class='line'><span class="n">redis</span><span class="o">-</span><span class="n">cli</span> <span class="c1">#Redis命令行操作工具。当然，你也可以用telnet根据其纯文本协议来操作</span>
</span><span class='line'>
</span><span class='line'><span class="n">redis</span><span class="o">-</span><span class="n">benchmark</span> <span class="c1">#Redis性能测试工具，测试Redis在你的系统及你的配置下的读写性能</span>
</span><span class='line'>
</span><span class='line'><span class="n">redis</span><span class="o">-</span><span class="n">stat</span> <span class="c1">#Redis状态检测工具，可以检测Redis当前状态参数及延迟状况</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>定时队列</h3>

<pre><code>gem "resque-scheduler", "~&gt; 2.0.1"  :require =&gt; "resque_scheduler"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在rails中创建定时任务]]></title>
    <link href="http://shooterman.github.io/blog/2013/11/06/whenever/"/>
    <updated>2013-11-06T17:30:26+08:00</updated>
    <id>http://shooterman.github.io/blog/2013/11/06/whenever</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/javan/whenever">whenever 源码</a></p>

<h3>安装 运行</h3>

<p>1 gem &#8220;whenever&#8221;, &#8220;~> 0.8.4&#8221;</p>

<p>2 在命令行输入 <code>wheneverize .</code></p>

<p>生成config/schedule.rb</p>

<p>3 编写 schedule.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">env</span> <span class="ss">:PATH</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;PATH&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:output</span><span class="p">,</span> <span class="p">{</span><span class="ss">:error</span> <span class="o">=&gt;</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Whenever</span><span class="o">.</span><span class="n">path</span><span class="p">,</span> <span class="s2">&quot;log&quot;</span><span class="p">,</span> <span class="s2">&quot;cron_err.log&quot;</span><span class="p">),</span> <span class="ss">:standard</span> <span class="o">=&gt;</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Whenever</span><span class="o">.</span><span class="n">path</span><span class="p">,</span> <span class="s2">&quot;log&quot;</span><span class="p">,</span> <span class="s2">&quot;cron_out.log&quot;</span><span class="p">)}</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:environment</span><span class="p">,</span> <span class="s1">&#39;development&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>4 执行</p>

<pre><code>whenever #根据schedule.rb 转换成cron语法, 不会写入crontab文件

whenever --update-crontab #写入crontab文件

whenever -s environment=development -w ~/minsheng/config/schedule.rb

whenever --help
</code></pre>

<h3>linux crontab 命令</h3>

<pre><code>crontab -l # 列出某个用户cron服务的详细内容
crontab -e # 修改
crontab -r # 删除某个用户的cron服务
</code></pre>

<h3>schedule.rb 示例</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">every</span> <span class="mi">3</span><span class="o">.</span><span class="n">hours</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">runner</span> <span class="s2">&quot;MyModel.some_process&quot;</span>
</span><span class='line'>  <span class="n">rake</span> <span class="s2">&quot;my:rake:task&quot;</span>
</span><span class='line'>  <span class="n">command</span> <span class="s2">&quot;/usr/bin/my_great_command&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">every</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="ss">:at</span> <span class="o">=&gt;</span> <span class="s1">&#39;4:30 am&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">runner</span> <span class="s2">&quot;MyModel.task_to_run_at_four_thirty_in_the_morning&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">every</span> <span class="ss">:hour</span> <span class="k">do</span> <span class="c1"># Many shortcuts available: :hour, :day, :month, :year, :reboot</span>
</span><span class='line'>  <span class="n">runner</span> <span class="s2">&quot;SomeModel.ladeeda&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">every</span> <span class="ss">:sunday</span><span class="p">,</span> <span class="ss">:at</span> <span class="o">=&gt;</span> <span class="s1">&#39;12pm&#39;</span> <span class="k">do</span> <span class="c1"># Use any day of the week or :weekend, :weekday</span>
</span><span class='line'>  <span class="n">runner</span> <span class="s2">&quot;Task.do_something_great&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">every</span> <span class="s1">&#39;0 0 27-31 * *&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">command</span> <span class="s2">&quot;echo &#39;you can use raw cron syntax too&#39;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># run this task only on servers with the :app role in Capistrano</span>
</span><span class='line'><span class="c1"># see Capistrano roles section below</span>
</span><span class='line'><span class="n">every</span> <span class="ss">:day</span><span class="p">,</span> <span class="ss">:at</span> <span class="o">=&gt;</span> <span class="s1">&#39;12:20am&#39;</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:app</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">rake</span> <span class="s2">&quot;app_server:task&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>定义自己的工作类型</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">job_type</span> <span class="ss">:awesome</span><span class="p">,</span> <span class="s1">&#39;/usr/local/bin/awesome :task :fun_level&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">every</span> <span class="mi">2</span><span class="o">.</span><span class="n">hours</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">awesome</span> <span class="s2">&quot;party&quot;</span><span class="p">,</span> <span class="ss">:fun_level</span> <span class="o">=&gt;</span> <span class="s2">&quot;extreme&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>whenever 默认的工作类型与定义</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">job_type</span> <span class="ss">:command</span><span class="p">,</span> <span class="s2">&quot;:task :output&quot;</span>
</span><span class='line'><span class="n">job_type</span> <span class="ss">:rake</span><span class="p">,</span>    <span class="s2">&quot;cd :path &amp;&amp; :environment_variable=:environment bundle exec rake :task --silent :output&quot;</span>
</span><span class='line'><span class="n">job_type</span> <span class="ss">:runner</span><span class="p">,</span>  <span class="s2">&quot;cd :path &amp;&amp; script/rails runner -e :environment &#39;:task&#39; :output&quot;</span>
</span><span class='line'><span class="n">job_type</span> <span class="ss">:script</span><span class="p">,</span>  <span class="s2">&quot;cd :path &amp;&amp; :environment_variable=:environment bundle exec script/:task :output&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>RVM 集成</h3>

<p>&#8230;</p>

<h3>Capistrano 集成</h3>

<p>&#8230;</p>

<h3>资料</h3>

<p><a href="http://zh.wikipedia.org/wiki/Cron">What is Cron</a></p>

<p><a href="http://huacnlee.com/blog/create-rails-task-scheduler-by-rake-and-cronjob/">Rake + cronjob 创建计划任务</a></p>

<p><a href="http://railscasts.com/episodes/164-cron-in-ruby">164-cron-in-ruby</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS 5.6 离线安装Ruby环境及配置项目]]></title>
    <link href="http://shooterman.github.io/blog/2013/01/03/centos-offline-install-ruby-environment/"/>
    <updated>2013-01-03T15:43:00+08:00</updated>
    <id>http://shooterman.github.io/blog/2013/01/03/centos-offline-install-ruby-environment</id>
    <content type="html"><![CDATA[<p>遇到了这么个小问题，需要把完成的railsApp打包到CentOS上，而且服务器不能联网，
ruby 环境也没有安装。一番捣鼓，步骤如下:</p>

<p><strong>没有找到离线安装rvm的方法 而且 linux版本为CentOS 5.6</strong></p>

<h3>下载源文件</h3>

<p><a href="http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p327.tar.gz">ruby-1.9.3-p327</a></p>

<p><a href="http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz">yaml-0.1.4.tar.gz</a></p>

<p><a href="http://rubygems.org/downloads/bundler-1.2.3.gem">bundler-1.2.3</a></p>

<h3>本地服务器</h3>

<h4>打包 rails app</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle package
</span><span class='line'>#若提示没有,安装bundler并重复以上步骤
</span><span class='line'>$ gem install bundler
</span><span class='line'>$ bundle package # 将项目所需要的gem复制到 vendor/cache
</span><span class='line'>$ tar -czf   railsApp.tar.gz   railsApp #压缩打包</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>远程服务器</h3>

<h4><strong>首先安装 yaml-0.1.4.tar.gz，再安装ruby</strong></h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tar –xzvf  yaml-0.1.4.tar.gz
</span><span class='line'>$ ./configure
</span><span class='line'>$ make
</span><span class='line'>$ make install</span></code></pre></td></tr></table></div></figure>


<h4>安装ruby</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tar  -xzvf  ruby-1.9.3-p327.tar.gz
</span><span class='line'>$ cd ruby-1.9.3-p327
</span><span class='line'>$ ./configure
</span><span class='line'>$ make
</span><span class='line'>$ make install
</span><span class='line'>$ ruby -v   #提示即安装成功
</span><span class='line'>$ gem -v    #gem已经安装</span></code></pre></td></tr></table></div></figure>


<h4>本地安装bundler</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install  bundler-1.2.3.gem
</span><span class='line'>$ bundle -v  #提示即安装成功</span></code></pre></td></tr></table></div></figure>


<h4>部署 rails app</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tar  -xzvf  railsApp.tar.gz
</span><span class='line'>$ cd railsApp
</span><span class='line'>$ bundle install --local  #本地安装gem</span></code></pre></td></tr></table></div></figure>


<p><strong>注意修改配置文件</strong></p>

<pre><code>$ rails s  #测试运行
</code></pre>

<p> <a href="https://gist.github.com/4274057">分享在gist上</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再见2012, 你好2013]]></title>
    <link href="http://shooterman.github.io/blog/2013/01/01/goodbye-2012-hello-2013/"/>
    <updated>2013-01-01T16:43:00+08:00</updated>
    <id>http://shooterman.github.io/blog/2013/01/01/goodbye-2012-hello-2013</id>
    <content type="html"><![CDATA[<p>当我还在2011憧憬2012的时候，它走到了末尾，迎来了2013，时间走的好快。</p>

<p><del>说好的末日没有来，爱情也木来 </del></p>

<p>换了新的工作，换了新的同事。</p>

<p>自从11年11月份接触ruby，至今也有1年多了。感觉进步不是很快，一直是一个人摸爬滚打，
没有真正的引路人。</p>

<h2>To Do List</h2>

<h3>Rails</h3>

<p>Rails测试框架
基本定性在已 RSpec+factory_girl为基础的测试框架，以后逐步添加其他gem。
测试效率，覆盖率，自动程度，学习难度，这几个方面考虑。</p>

<h3>Git</h3>

<p>这么潮的版本控制工具，不用实在不是我性格。
等比对了Git跟svn的优缺点，我就要转型了。</p>

<h3>论坛</h3>

<p>计划推迟了很长时间</p>

<h3>提高英语水平</h3>

<p>感觉我的水平就停留在了初中人教版，看这么多文档，费时费力，懂英语会走的更远。</p>

<h3>Python</h3>

<p>python算是ruby的兄弟语言。虽没有ruby那么灵活，但运行速度快，跨平台性好。
GUI方面比ruby强了很多。java语法太琐碎了，概念性的东西一大堆。</p>

<h3>mac mini</h3>

<p>虽然在ubuntu基本可以胜任，但在GUI方面还是mac支持的不错。
公司也不提供工作的电脑，整天扛着笔记本挤地铁，有些痛苦。
到时候可以研究下ios，当作副业，开发个app，弄点小钱也不错。</p>

<h3>ruby on arduino</h3>

<p>看见别人分享的ppt，感觉很新奇，很潮。
软件跟硬件打交道，这是最能直观体现软件价值功能的地方了。</p>

<p>arduino在<a href="http://arduino.tw/">tw</a>很火。</p>

<p><a href="http://zh.wikipedia.org/wiki/Arduino">中文wiki</a></p>

<p><a href="http://www.arduino.cc/">arduino官网</a></p>

<h3>最后  多赚钱，money才是王道啊。</h3>

<p>PS: 这本想在13年1月1日发出来的，竟然拖到了 13年12月21日。</p>

<p>补录:</p>

<p>昨天(12-20)外祖父突然去世，我的blog也能用了，这是偶然么?
愿您安息</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby的yield和闭包]]></title>
    <link href="http://shooterman.github.io/blog/2012/09/15/the-ruby-syntax-yield-and-closure/"/>
    <updated>2012-09-15T02:06:00+08:00</updated>
    <id>http://shooterman.github.io/blog/2012/09/15/the-ruby-syntax-yield-and-closure</id>
    <content type="html"><![CDATA[<p><strong>First Blood</strong>  来些血腥凶残暴力的！
这些经常在面试中被提问，内容很多。
从面试里单独拿出来，这东西相当于神器级别，必须谨慎对待。</p>

<p>yield是ruby中一个特殊的关键字，可以调用块方法(block)，而block是ruby闭包的一种，
故将三者联系起来，yeild天生就是闭包的小跟班儿。感觉没必要单独讲，不然很割裂的赶脚。</p>

<h3><strong> ruby 闭包</strong>   block，Proc，lambda</h3>

<p><strong>block 与 yield</strong>
block 是最常用到的，有两种形式,{}和do &#8230; end。
一般单行习惯用{}，多行用do &#8230; end，当然这只是习惯。</p>

<figure class='code'><figcaption><span>demo.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_yield</span>
</span><span class='line'>  <span class="k">yield</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">test_yield</span><span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;this is first block.&quot;</span> <span class="p">}</span> <span class="c1"># yield可以调用block 即{...}</span>
</span><span class='line'>
</span><span class='line'><span class="n">test_yield</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;this is second block.&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">test2_yield</span>
</span><span class='line'>  <span class="k">yield</span><span class="p">(</span><span class="s2">&quot;shooter&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">test2_yield</span><span class="p">{</span> <span class="o">|</span><span class="n">var</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;This args is </span><span class="si">#{</span><span class="n">var</span><span class="si">}</span><span class="s2">.&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="c1">#传给yield的参数(此处为shooter)即对应了block中的参数(||中的部分)</span>
</span></code></pre></td></tr></table></div></figure>


<p>还可以通过 Kernel#block_given? 方法询问当前的方法调用是否包含块。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">yield</span> <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;no block&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">test</span> <span class="c1"># =&gt; no block</span>
</span><span class='line'><span class="nb">test</span><span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Here&#39;s a block&quot;</span> <span class="p">}</span> <span class="c1"># =&gt; Here&#39;s a block</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Proc对象</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">plus</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">plus</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># =&gt;3</span>
</span><span class='line'>
</span><span class='line'><span class="n">subtract</span> <span class="o">=</span> <span class="nb">proc</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">subtract</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="c1"># =&gt;3</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这被称为<strong>延迟执行</strong>(Defferred Evaluation)。</p>

<p>通过<strong>&amp;操作符</strong>，block 与 Proc对象可以相互转化。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">math_one</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">oper</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="k">yield</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">math_two</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">oper</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">oper</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">math_one</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">}</span> <span class="c1"># =&gt; 2 + 3 = 5</span>
</span><span class='line'><span class="n">math_two</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">|</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="p">}</span> <span class="c1"># =&gt; 2 * 3 = 6</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么这个&amp;起了什么作用？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="o">&amp;</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>  <span class="n">code</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="n">my_method</span><span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="s2">&quot;Hello,</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">!&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="nb">p</span><span class="o">.</span><span class="n">class</span> <span class="c1"># =&gt; Proc</span>
</span><span class='line'><span class="nb">puts</span> <span class="nb">p</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s2">&quot;shooter&quot;</span><span class="p">)</span> <span class="c1"># =&gt; Hello,shooter!</span>
</span></code></pre></td></tr></table></div></figure>


<p>&amp;操作符的真正含义：Proc对象和块之间的切换符号。&amp;code是一个块，code是一个Proc对象。
简单的去掉&amp;操作符，我们就能再次得到一个Proc对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">proc_to_block</span><span class="p">(</span><span class="n">greeting</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">greeting</span><span class="si">}</span><span class="s2">,</span><span class="si">#{</span><span class="k">yield</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span><span class="s2">&quot;shooter!&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">my_proc</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="n">proc_to_block</span><span class="p">(</span><span class="s2">&quot;Hello&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">my_proc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>lambda函数</strong>
lambda跟Proc就像两个双胞胎</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">plus</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">plus</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># =&gt;3</span>
</span></code></pre></td></tr></table></div></figure>


<p>lambda跟Proc有两个最明显的区别: <br/>
1. lambda检查参数的个数，Proc不会。<br/>
&nbsp;在Proc中，多余的参数被设为nil。但lambda中，Ruby会抛出一个ArgumentError错误。<br/>
2. return不同。<br/>
&nbsp;lambda的return是返回值给方法，方法会继续执行。Proc的return会终止方法并返回得到的值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">proc_return</span>
</span><span class='line'>  <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;Proc.new&quot;</span><span class="p">}</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;proc_return method finished&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">lambda_return</span>
</span><span class='line'>  <span class="nb">lambda</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;lambda&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;lambda_return method finished&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">proc_return</span>    <span class="c1"># =&gt; Proc.new</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">lambda_return</span> <span class="c1"># =&gt; lambda_return method finished</span>
</span></code></pre></td></tr></table></div></figure>


<p>看了代码会一目了然。参考了不少资料，就是拼凑的起来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR的一些面试经验(一)]]></title>
    <link href="http://shooterman.github.io/blog/2012/09/05/interview-questions-about-the-ror/"/>
    <updated>2012-09-05T01:30:00+08:00</updated>
    <id>http://shooterman.github.io/blog/2012/09/05/interview-questions-about-the-ror</id>
    <content type="html"><![CDATA[<p> 那些天我不是在面试，就是在面试的路上，搞得很懈怠，主要还是精神上的。
 有的中规中矩;有的问题很琐碎;有的很BT,概念性的东西一股闹的全抛出来了&#8230;&#8230;
 我记性不太好，对概念不感冒，倒不是从小这样，记得当年还背过视力表，
 可能三聚氰胺喝多了吧。</p>

<h3>Symbol与String</h3>

<p>在rails中经常看到Symbol，像 <code>:name  :email params[:user]</code>，
这种已:开头的变量就是Symbol对象。貌似我经常把两者混用，还有些不同的。</p>

<p><strong>创建 symbol 对象</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> :foo
</span><span class='line'> :"shooter"</span></code></pre></td></tr></table></div></figure>


<p>在 Ruby 中每一个对象都有唯一的对象标识符（Object Identifier），可以通过 object_id 方法来得到一个对象的标识符。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.9.3p194 :001 &gt; 3.times{ puts :foo.object_id }
</span><span class='line'>230808
</span><span class='line'>230808
</span><span class='line'>230808
</span><span class='line'> =&gt; 3 
</span><span class='line'>1.9.3p194 :002 &gt; 3.times{ puts "foo".object_id }
</span><span class='line'>85823400
</span><span class='line'>85823380
</span><span class='line'>85823350
</span><span class='line'> =&gt; 3 </span></code></pre></td></tr></table></div></figure>


<p>一个字符串每出现一次 Ruby 就会创建一个 String对象，即便他们包含了相同的字符串内容；
而对于 Symbol 对象，一个名字（字符串内容）唯一确定一个 Symbol 对象。
Symbol 对象一旦定义将一直存在，你不能对symbol赋值，
而且在运行环境中symbol的值也不会改变，直到程序执行退出。</p>

<p><strong>相互转化</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Symbol到String
</span><span class='line'>
</span><span class='line'>1.9.3p194 :001 &gt; :foo.id2name
</span><span class='line'> =&gt; "foo" 
</span><span class='line'>1.9.3p194 :002 &gt; :foo.to_s
</span><span class='line'> =&gt; "foo" 
</span><span class='line'>1.9.3p194 :003 &gt; :"I am a rubyist"
</span><span class='line'> =&gt; :"I am a rubyist" 
</span><span class='line'>
</span><span class='line'># String到Symbol
</span><span class='line'>
</span><span class='line'>1.9.3p194 :004 &gt; "rubyist".to_sym
</span><span class='line'> =&gt; :rubyist 
</span><span class='line'>1.9.3p194 :005 &gt; "rubyist".intern
</span><span class='line'> =&gt; :rubyist </span></code></pre></td></tr></table></div></figure>


<p>从实用角度看，在一些场景下Symbol好过String只有两点：<strong>节省内存，表达简洁</strong> <br/>
通常来讲，当你面临 String 还是 Symbol 的选择时，可以参考以下标准：<br/>
&nbsp;&nbsp;如果使用字符串的内容，这个内容可能会变化，使用 String <br/>
&nbsp;&nbsp;如果使用固定的名字或者说是标识符，使用 Symbol。</p>

<p>这是第一篇，没想到一个内容就这么多，再写东西就有些多了，果断阉割了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[翻越GFW 走向世界]]></title>
    <link href="http://shooterman.github.io/blog/2012/08/31/across-the-great-wall/"/>
    <updated>2012-08-31T05:02:00+08:00</updated>
    <id>http://shooterman.github.io/blog/2012/08/31/across-the-great-wall</id>
    <content type="html"><![CDATA[<p>&#8220;Across the Great Wall we can reach every corner in the world.&#8221;</p>

<p>中国不愧为文明古国，早有先见之明，古有长城，今有×××，人们乐此不疲的到墙外透透气儿。
不知何时翻墙也晋升为程序猿的基本功——仅是个人观点。</p>

<p>在ubuntu用GAE翻墙，简单经济实惠。适合我这种不想买VPN又想看外面的人。
我翻墙更多是浏览网页，基本用不到全局代理，我的标配是chrome和它的一个插件Proxy SwitchySharp。</p>

<h4><strong>安装chrome</strong></h4>

<p>尽管有Firefox，大爱还是chrome，先下载最新的deb安装包，然后</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo dpkg -i  google-chrome-stable_current_i386.deb
</span><span class='line'>  # 提示没有安装所需要的依赖包
</span><span class='line'>$ sudo apt-get -f install 
</span><span class='line'>  # 安装依赖包
</span><span class='line'>$ sudo dpkg -i  google-chrome-stable_current_i386.deb</span></code></pre></td></tr></table></div></figure>


<p>让我感觉最恐怖的是，chrome 关联好账户后，那些配置和书签都在了。My privacy!</p>

<h4><strong>注册Google App Engine帐号</strong></h4>

<p>1.用Google账户登录<a href="http://code.google.com/appengine/">Google App Engine</a>后，
点击Create an Application创建一个应用程序。</p>

<p>2.输入手机号码，接受创建验证码，必须有此过程，否则无法注册成功。</p>

<p>3.输入验证码后就进入了创建应用程序的详细设置界面。
 填写Application Identifier和Application Title以及勾选同意服务条款，点 Save 即完成创建。
  <strong>在这里把Application Identifier称为app_id</strong>。</p>

<h4><strong> SDK &amp;&amp;fetchserver &amp;&amp;localproxy</strong></h4>

<p>1.下载 <a href="http://googleappengine.googlecode.com/files/google_appengine_1.7.1.zip">Google App Engine SDK</a>，
这是python版的SDK，因为ubuntu自带了python，解压sdk到任意文件夹。</p>

<p>2.在<a href="http://code.google.com/p/gappproxy/downloads/list">这里</a>，
下载对应的localproxy和fetchserver的linux版本。
<strong>解压fetchserver文件夹至Google App Engine SDK目录</strong>。</p>

<p>3.打开fetchserver文件夹内的app.yaml文件，修改第一行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>application: your_application_name</span></code></pre></td></tr></table></div></figure>


<p>your_application_name改为刚才输入的app_id，
再打开localproxy文件夹的proxy.conf文件，修改最后一行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#fetch_server = http://your-fetch-server.appspot.com/fetch.py</span></code></pre></td></tr></table></div></figure>


<p>去掉#，your-fetch-serve改为刚才输入的app_id。</p>

<p> 4.上传fetchserver：进入Google App Engine SDK目录，运行命令appcfg.py update fetchserver，会要求你输入Google 账户及密码，之后关闭结束上传。</p>

<p> 5.运行proxy.py。</p>

<p> 进入localproxy文件夹，然后
 <code>
 $ python proxy.py
</code></p>

<h4><strong>安装Proxy SwitchySharp插件</strong></h4>

<p>从Chrome 网上应用店安装Proxy SwitchySharp，配置 HTTP Proxy 为 127.0.0.1 ，Port 为8000。
然后保存。被墙的时候，点击Proxy SwitchySharp，刷新页面即可。</p>

<h4><strong>快捷方式</strong></h4>

<p>若每次都要翻墙都要用到命令行，一定会吐血。我用到一个简单的方法，就是给文件添加链接到桌面</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#文件添加执行权限
</span><span class='line'>$ sudo chmod +x proxy.py
</span><span class='line'># 添加链接
</span><span class='line'>$ ln ~/GFW/localproxy-2.0.0/proxy.py  ~/Desktop/killer</span></code></pre></td></tr></table></div></figure>


<p>只要在桌面双击killer即可。</p>

<p>今天是农历七月十五，有些想妈妈了，愿她一切都好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 12.04的安装和配置(二)]]></title>
    <link href="http://shooterman.github.io/blog/2012/08/27/ubuntu-12-dot-04-installation-and-configuration/"/>
    <updated>2012-08-27T20:12:00+08:00</updated>
    <id>http://shooterman.github.io/blog/2012/08/27/ubuntu-12-dot-04-installation-and-configuration</id>
    <content type="html"><![CDATA[<p>上一篇坑挖了一半，今天一定要把坑挖好。</p>

<p>继续 <a href="http://www.modrails.com/">passenger</a>, <a href="http://wiki.nginx.org/Main">nginx</a>,
 <a href="http://www.mongodb.org/">mongodb</a>, <a href="http://redis.io/">redis</a>,
 <a href="http://nodejs.org/">Node.js</a>  的安装。</p>

<h4><strong>安装Node.js</strong></h4>

<p>配置好ruby on rails 环境后，创建一个rails 项目</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rails new demo
</span><span class='line'> ……
</span><span class='line'>$ cd demo
</span><span class='line'>$ rails s</span></code></pre></td></tr></table></div></figure>


<p>一般会提示这样的错误，<code>Could not find a JavaScript runtime ...</code>，
具体请移步 <a href="http://stackoverflow.com/questions/8059332/could-not-find-a-javascript-runtime-see-https-github-com-sstephenson-execjs-f">stackoverflow</a></p>

<p>在ubuntu环境下，安装node.js即可</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install nodejs</span></code></pre></td></tr></table></div></figure>


<p>完成后再次运行项目</p>

<h4><strong>安装passenger和nginx</strong></h4>

<p>安装passenger</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install passenger</span></code></pre></td></tr></table></div></figure>


<p>
安装passenger的nginx模块，nginx一并安装，需要root，我们可以用rvmsudo</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvmsudo passenger-install-nginx-module
</span><span class='line'># 提示哪种安装模式
</span><span class='line'>
</span><span class='line'>1. Yes: download, compile and install Nginx for me. (recommended)
</span><span class='line'> # 完全安装
</span><span class='line'> 
</span><span class='line'>2. No: I want to customize my Nginx installation. (for advanced users)
</span><span class='line'> # 自定义安装</span></code></pre></td></tr></table></div></figure>


<p>选择1，回车，进一步提示安装位置，直接回车，nginx 将安装在默认位置，即/opt/nginx。
添加nginx启动脚本，参考<a href="http://wiki.nginx.org/Nginx-init-ubuntu">这里</a>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo mv nginx /etc/init.d   # 脚本移动到 /etc/init.d
</span><span class='line'>$ sudo chmod +x nginx         # 添加执行权限
</span><span class='line'>
</span><span class='line'>$ sudo /etc/init.d/nginx start
</span><span class='line'># * Starting Nginx Server...                   [ OK ]
</span><span class='line'>
</span><span class='line'>$ sudo /etc/init.d/nginx restart
</span><span class='line'># * Stopping Nginx Server...                   [ OK ]
</span><span class='line'># * Starting Nginx Server...                   [ OK ]
</span><span class='line'>
</span><span class='line'>$ sudo /etc/init.d/nginx stop
</span><span class='line'># * Stopping Nginx Server...                   [ OK ]</span></code></pre></td></tr></table></div></figure>


<p><strong>nginx的配置</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo vim /opt/nginx/conf/nginx.conf              # 打开配置文件
</span><span class='line'>......
</span><span class='line'>http {
</span><span class='line'>    passenger_root ～/.rvm/gems/ruby-1.9.3-p194/gems/passenger-3.0.15;
</span><span class='line'>    passenger_ruby ~/.rvm/wrappers/ruby-1.9.3-p194/ruby;
</span><span class='line'>
</span><span class='line'>    include       mime.types;
</span><span class='line'>    default_type  application/octet-stream;
</span><span class='line'>     ......
</span><span class='line'>    server {
</span><span class='line'>        listen 80;                           #端口
</span><span class='line'>        server_name  localhost;              #域名
</span><span class='line'>        root ~/www/demo/public;  #项目public路径
</span><span class='line'>        passenger_enabled on;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这样就可以访问 http://localhost 了</p>

<h4><strong>安装 mongodb</strong></h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install mongodb</span></code></pre></td></tr></table></div></figure>


<p>运行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mongo
</span><span class='line'>MongoDB shell version: 2.0.4
</span><span class='line'>connecting to: test</span></code></pre></td></tr></table></div></figure>


<h4><strong>安装redis</strong></h4>

<p>下载并安装redis</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://redis.googlecode.com/files/redis-2.4.16.tar.gz
</span><span class='line'>tar -zxf redis-2.4.16.tar.gz
</span><span class='line'>cd redis-2.4.16 
</span><span class='line'>make 
</span><span class='line'>sudo make install</span></code></pre></td></tr></table></div></figure>


<h4><strong>安装mysql</strong></h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install mysql-server mysql-client</span></code></pre></td></tr></table></div></figure>


<p>全都大功告成 ^_^</p>

<p>PS 发现网页被墙了,ubuntu 也跑不了翻墙，Fuck GFW!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 12.04的安装和配置(一)]]></title>
    <link href="http://shooterman.github.io/blog/2012/08/26/ubuntu-12-dot-04-installation-and-configuration/"/>
    <updated>2012-08-26T17:26:00+08:00</updated>
    <id>http://shooterman.github.io/blog/2012/08/26/ubuntu-12-dot-04-installation-and-configuration</id>
    <content type="html"><![CDATA[<p> <a href="http://www.ubuntu.com/">Ubuntu 12.04</a> 出来有段时间了，一直没有更新，本想从11.10的系统
 直接升级，结果脆生生挂掉了，好多东西拿不出来了。杯具，重装吧！</p>

<p> 主要是 ruby on rails 和它相关联的在 ubuntu 上的安装配置。
 包括 <a href="https://rvm.io/">rvm</a> , ruby on rails, Sublime Text,
 <a href="http://www.modrails.com/">passenger</a>, <a href="http://wiki.nginx.org/Main">nginx</a>,
 <a href="http://www.mongodb.org/">mongodb</a>, <a href="http://redis.io/">redis</a> 的安装，
 顺便把 <a href="http://nodejs.org/">Node.js</a> 也装上，当作汇总了。</p>

<h2>安装Ubuntu 12-04</h2>

<p>首先准备好12.04的 iso 镜像，需要先从官网下载，我是把iso文件写入U盘后安装的。
从10.10以后，用 UltraISO 制作出来的 Ubuntu 启动盘会出现无法启动的现象，有人说 ImageWriter 很靠谱，
先用了<a href="https://github.com/downloads/openSUSE/kiwi/ImageWriter.exe">ImageWriter</a>，
不过我的本本提示没有写入权限，所以找到了<a href="https://launchpad.net/win32-image-writer/">另一个版本</a>，
 顺利写入。然后插上U盘，重启，设置从U盘启动，基本一路 next，结果手欠，装成E文的系统了。</p>

<h3>安装配置</h3>

<h4><strong>中文输入</strong></h4>

<p>12.04 的中文输入是个大问题， 即使能输入中文，在低版本的 Sublime Text 中也不能输入中文，
好在 <strong>dev版本在其他输入法下</strong> 已经ok了。</p>

<h4><strong>安装 Ruby On Rails</strong></h4>

<p>先安装一些 ruby on rails 的依赖包，听前辈们的话不会错。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install -y build-essential openssl curl libcurl3-dev libreadline6 libreadline6-dev git zlib1g zlib1g-dev libssl-dev libyaml-dev libxml2-dev libxslt-dev autoconf automake libtool imagemagick libmagickwand-dev libpcre3-dev libsqlite3-dev</span></code></pre></td></tr></table></div></figure>


<p><strong>No.1 安装 RVM</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ curl -L get.rvm.io | bash -s stable </span></code></pre></td></tr></table></div></figure>


<p> 给 ~/.bashrc (Ubuntu) 加上脚本引用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ echo '[[ -s " HOME/.rvm/scripts/rvm" ]] && source " HOME/.rvm/scripts/rvm"' &gt;&gt; ~/.bashrc</span></code></pre></td></tr></table></div></figure>


<p> 然后，重新载入那个文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ source ~/.bashrc </span></code></pre></td></tr></table></div></figure>


<p>测试一下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm -v
</span><span class='line'>rvm 1.15.5 (stable) by Wayne E. Seguin &lt;wayneeseguin@gmail.com&gt;, Michal Papis &lt;mpapis@gmail.com&gt; [https://rvm.io/]</span></code></pre></td></tr></table></div></figure>


<p><strong>No.2  用 RVM 安装 Ruby 环境</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm list known #显示可供选择的版本
</span><span class='line'>
</span><span class='line'>[ruby-]1.8.6[-p420]
</span><span class='line'>[ruby-]1.8.7[-p370]
</span><span class='line'>[ruby-]1.9.1[-p431]
</span><span class='line'>[ruby-]1.9.2-p180
</span><span class='line'>[ruby-]1.9.2-p290
</span><span class='line'>[ruby-]1.9.2-p318
</span><span class='line'>[ruby-]1.9.2[-p320]
</span><span class='line'>[ruby-]1.9.2-head
</span><span class='line'>[ruby-]1.9.3-preview1
</span><span class='line'>[ruby-]1.9.3-rc1
</span><span class='line'>[ruby-]1.9.3-p0
</span><span class='line'>[ruby-]1.9.3-p125
</span><span class='line'>[ruby-]1.9.3[-p194]
</span><span class='line'>[ruby-]1.9.3-head
</span><span class='line'>ruby-head
</span><span class='line'>......
</span><span class='line'>
</span><span class='line'># 要安装1.9.3，直接
</span><span class='line'>$ rvm install 1.9.3  </span></code></pre></td></tr></table></div></figure>


<p>&#8230;&#8230;&#8230;&#8230;&#8230;&#8230; 漫长的的等待 &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;</p>

<p>Ruby 装好以后，通过 RVM 将指定版本的 Ruby 设置为系统默认版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm  1.9.3 --default </span></code></pre></td></tr></table></div></figure>


<p>测试一下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby -v
</span><span class='line'>ruby 1.9.3p194 (2012-04-20 revision 35410) [i686-linux]
</span><span class='line'>$ gem -v
</span><span class='line'>1.8.23</span></code></pre></td></tr></table></div></figure>


<p><strong>No.3 安装 Rails 环境</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install bundler rails</span></code></pre></td></tr></table></div></figure>


<p>测试一下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle -v
</span><span class='line'>Bundler version 1.1.5
</span><span class='line'>$ rails -v
</span><span class='line'>Rails 3.2.8</span></code></pre></td></tr></table></div></figure>


<p> ruby on rails 的安装齐活了。</p>

<h4><strong>安装 Sublime Text</strong></h4>

<p>由于<strong>输入汉字</strong>原因，安装 Sublime Text 的dev版本，就是比较新的。
先 google 一下 Sublime Text 的ppa源，好吧，ppa暂且是什么先不管。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo add-apt-repository ppa:webupd8team/sublime-text-2
</span><span class='line'>$ sudo apt-get update # 更新软件源
</span><span class='line'>$ sudo apt-get install sublime-text-dev</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我用到的 Sublime Text 2 插件]]></title>
    <link href="http://shooterman.github.io/blog/2012/08/08/my-sublime-text-2-plugin-summary/"/>
    <updated>2012-08-08T20:24:00+08:00</updated>
    <id>http://shooterman.github.io/blog/2012/08/08/my-sublime-text-2-plugin-summary</id>
    <content type="html"><![CDATA[<p> <a href="http://www.sublimetext.com/">Sublime Text 2</a> 是在俺剛學習<strong>Ruby</strong>時大大們極力推薦的，真的超贊。
 Sublime Text是用<a href="http://zh.wikipedia.org/zh/Python">python语言</a>编写。如果熟悉<a href="http://www.python.org/">python</a>，你也可以编写插件實現自己想要的功能。目前插件集中在github上，需要在线安装。安装插件前需要 <strong>安装包控制(Package Control)</strong></p>

<h3>安装包控制(Package Control)</h3>

<ul>
<li>打开Sublime Text 2，按下  <code>Ctrl+`</code> 调出 Console。</li>
<li>将以下代码粘贴进命令行中并回车:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import urllib2,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read())</span></code></pre></td></tr></table></div></figure>


<ul>
<li>重启 Sublime Text 2，如果在 <code>Preferences -&gt; Package Settings</code>中见到
 <code>Package Control</code>这一项，就说明安装成功了。</li>
</ul>


<h3>使用 Package Control 安装插件</h3>

<ul>
<li><p>按下<code>Ctrl+Shift+P</code>，调出窗口</p></li>
<li><p>在输入框中输入<code>install</code>，将智能模糊提示，光标选中 <code>Package Control: Install Package</code>，果断回车</p></li>
<li><p>在新弹出的窗口中，(假设SublimeREPL)，直接将插件名(如 SublimeREPL)复制到输入框中</p></li>
<li><p>大功告成，有时特殊情况，需要在第二步前，先通过输入repository 添加插件的url，重复第二步，然后真正的ok。
<strong>MarkdownEditing</strong> 是这样滴情况。</p></li>
</ul>


<h3>我的插件集</h3>

<p>俗话就说嘛 好记性不如烂笔头 ^_^</p>

<ul>
<li><p><a href="https://github.com/condemil/Gist">Gist</a>  gist代码分享</p></li>
<li><p><a href="https://github.com/wuub/SublimeREPL">SublimeREPL</a>
将 Ruby Shell (即 IRB)整合到 Sublime Text 中,而且集成了 node coffeescript lua 等，不过需要配置好环境，
偶的只有irb，其他都是提示错误。</p></li>
<li><p><a href="http://ttscoff.github.com/MarkdownEditing/">MarkdownEditing</a>   markdown编辑插件</p></li>
<li><p><a href="https://github.com/revolunet/sublimetext-markdown-preview">Markdown Preview</a> markdown预览插件</p></li>
</ul>


<p>感觉每个插件都大有搞头的样子 ，以后再说吧。</p>

<p>PS: 第一次写东西，刚刚上手<a href="http://markdown.tw/">markdown</a>，参考了网上n多资料，还要亲手尝试一遍，恨费工夫和精力，好在没有神马意外情况。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Blog]]></title>
    <link href="http://shooterman.github.io/blog/2012/07/24/my-first-blog/"/>
    <updated>2012-07-24T21:33:00+08:00</updated>
    <id>http://shooterman.github.io/blog/2012/07/24/my-first-blog</id>
    <content type="html"><![CDATA[<p>我的Blog开张了！</p>
]]></content>
  </entry>
  
</feed>
